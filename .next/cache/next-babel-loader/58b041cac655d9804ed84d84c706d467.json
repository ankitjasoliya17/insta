{"ast":null,"code":"var __jsx = React.createElement;\nimport React from 'react';\nimport { AppProvider, Button, Checkbox, Form, FormLayout, SettingToggle, TextStyle, TextField, Select, Card, Page, Popover, ColorPicker, Stack, hsbToRgb, rgbToHsb, rgbString } from '@shopify/polaris';\nimport \"@shopify/polaris/styles.css\";\n\nclass Postsettings extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      color: {\n        hue: 300,\n        brightness: 1,\n        saturation: 0.7,\n        alpha: 0.8\n      },\n      popoverActive: false,\n      checkwidget: 'grid',\n      checkhover: 'zoom_out',\n      display_border: true,\n      display_border_button_name: 'Enable',\n      social_sharing: true,\n      social_sharing_button_name: 'Enable',\n      border_width_value: 1,\n      widget_heading_value: ''\n    };\n    this.handlePopoverOpen = this.handlePopoverOpen.bind(this);\n    this.handleColorChange = this.handleColorChange.bind(this);\n    this.handleRgbChange = this.handleRgbChange.bind(this);\n    this.handlePopoverClose = this.handlePopoverClose.bind(this);\n    this.handleSelectChange = this.handleSelectChange.bind(this);\n    this.handleSelectHoveeffect = this.handleSelectHoveeffect.bind(this);\n    this.handleToggle = this.handleToggle.bind(this);\n    this.handleToggleSocial = this.handleToggleSocial.bind(this);\n    this.handleBorderwidth = this.handleBorderwidth.bind(this);\n    this.handleWidgetheading = this.handleWidgetheading.bind(this);\n    this.handleLayoutCol = this.handleLayoutCol.bind(this);\n    this.handleWidgetheading = this.handleWidgetheading.bind(this);\n  }\n\n  handleColorChange(color) {\n    this.setState({\n      color\n    });\n  }\n\n  handleRgbChange(value) {\n    const rgbValues = value.replace(/[^\\d*.?\\d*,]/g, \"\").split(\",\");\n    const color = rgbToHsb({\n      red: rgbValues[0],\n      green: rgbValues[1],\n      blue: rgbValues[2],\n      alpha: rgbValues[3]\n    });\n    this.setState({\n      color\n    });\n  }\n\n  handlePopoverClose() {\n    this.setState({\n      popoverActive: false\n    });\n  }\n\n  handlePopoverOpen() {\n    this.setState({\n      popoverActive: true\n    });\n  }\n\n  handleSelectChange(value) {\n    this.setState({\n      checkwidget: value\n    });\n  }\n\n  handleSelectHoveeffect(value) {\n    this.setState({\n      checkhover: value\n    });\n  }\n\n  handleToggle() {\n    if (this.state.display_border == false) {\n      this.setState({\n        display_border: true,\n        display_border_button_name: 'Disable'\n      });\n    } else {\n      this.setState({\n        display_border: false,\n        display_border_button_name: 'Enable'\n      });\n    }\n  }\n\n  handleToggleSocial() {\n    if (this.state.social_sharing == false) {\n      this.setState({\n        social_sharing: true,\n        social_sharing_button_name: 'Disable'\n      });\n    } else {\n      this.setState({\n        social_sharing: false,\n        social_sharing_button_name: 'Enable'\n      });\n    }\n  }\n\n  handleBorderwidth(value) {\n    this.setState({\n      border_width_value: value\n    });\n  }\n\n  handleWidgetheading(value) {\n    this.setState({\n      widget_heading_value: value\n    });\n  }\n\n  handleLayoutCol(value) {\n    this.setState({\n      layout_column_value: value\n    });\n  }\n\n  handleLayoutRow(value) {\n    this.setState({\n      layout_row_value: value\n    });\n  }\n\n  render() {\n    const {\n      color,\n      popoverActive\n    } = this.state;\n    const rgbaColor = rgbString(hsbToRgb(color));\n\n    const activator = __jsx(Button, {\n      onClick: this.handlePopoverOpen\n    }, __jsx(Stack, {\n      alignment: \"center\",\n      spacing: \"tight\"\n    }, __jsx(\"div\", {\n      style: {\n        height: \"2rem\",\n        width: \"2rem\",\n        borderRadius: \"0.3rem\",\n        background: rgbaColor\n      }\n    }), __jsx(\"span\", null, \"Border color\"))); // const handleSubmit = useCallback((_event) => {\n    //     setEmail('sdd');\n    //     setNewsletter(false);\n    // }, []);\n    //\n    // const handleNewsLetterChange = useCallback(\n    //     (value) => setNewsletter(value),\n    //     [],\n    // );\n    // const [selected, setSelected] = useState('grid');\n    // const [selected1, setSelected1] = useState('zoom_out');\n    // const handleSelectChange = useCallback((value) => setSelected(value), []);\n    // const handleSelectChange1 = useCallback((value) => setSelected1(value), []);\n    //\n    // const handleEmailChange = useCallback((value) => setEmail(value), []);\n\n\n    const options = [{\n      label: 'Grid',\n      value: 'grid'\n    }, {\n      label: 'List',\n      value: 'list'\n    }];\n    const options1 = [{\n      label: 'Zoom Out',\n      value: 'zoom_out'\n    }, {\n      label: 'Zoom In',\n      value: 'zoom_in'\n    }]; // const [active, setActive] = useState(false);\n    //\n    // const handleToggle = useCallback(() => setActive((active) => !active), []);\n    //\n    // const contentStatus = active ? 'Disable' : 'Enable';\n    //\n    //\n    // const [columnvalue, setcolumnvalue] = useState('1');\n    //\n    // const handleChangecolumn = useCallback((newValue) => setcolumnvalue(newValue), []);\n    //\n    // const [rowvalue, setrowvalue] = useState('1');\n    //\n    // const handleChangerow = useCallback((newValue) => setrowvalue(newValue), []);\n    // const [textwidthFieldValue, setTextFieldWidthValue] = useState('10.6');\n    // const [selectwidthValue, setBorderwidthValue] = useState('kg');\n    // const handleTextFieldwidthChange = useCallback(\n    //     (value) => setTextFieldWidthValue(value),\n    //     [],\n    // );\n    //\n    // const handleSelectwidthChange = useCallback((value) => setBorderwidthValue(value), []);\n\n    return __jsx(\"div\", null, __jsx(Form // onSubmit={handleSubmit}\n    , null, __jsx(FormLayout, null, __jsx(FormLayout.Group, null, __jsx(Select, {\n      label: \"Widget Type\",\n      options: options,\n      onChange: this.handleSelectChange,\n      value: this.state.checkwidget\n    }), __jsx(Select, {\n      label: \"Hover Effect\",\n      options: options1,\n      onChange: this.handleSelectHoveeffect,\n      value: this.state.checkhover\n    }), __jsx(SettingToggle, {\n      action: {\n        content: this.state.display_border_button_name,\n        onAction: this.handleToggle\n      },\n      enabled: this.state.display_border\n    })), __jsx(FormLayout.Group, null, __jsx(TextField, {\n      type: \"number\",\n      label: \"Layout Columns\",\n      value: this.state.layout_column_value,\n      onChange: this.handleLayoutCol\n    }), __jsx(TextField, {\n      type: \"number\",\n      label: \"Layout Rows\",\n      value: this.state.layout_row_value,\n      onChange: this.handleLayoutRow\n    }), __jsx(SettingToggle, {\n      action: {\n        content: this.state.social_sharing_button_name,\n        onAction: this.handleToggleSocial\n      },\n      enabled: this.state.social_sharing\n    })), __jsx(FormLayout.Group, null, __jsx(TextField, {\n      label: \"Border Width\",\n      type: \"number\",\n      value: this.state.border_width_value,\n      onChange: this.handleBorderwidth,\n      connectedRight: __jsx(Select, {\n        label: \"Pixel Unit\",\n        labelHidden: true,\n        value: \"PX\",\n        options: ['PX']\n      })\n    }), __jsx(TextField, {\n      label: \"Widget Heading\",\n      value: this.state.widget_heading_value,\n      onChange: this.handleWidgetheading\n    }), __jsx(Popover, {\n      active: popoverActive,\n      activator: activator,\n      onClose: this.handlePopoverClose\n    }, __jsx(Popover.Section, null, __jsx(ColorPicker, {\n      onChange: this.handleColorChange,\n      color: color,\n      allowAlpha: true\n    })), __jsx(Popover.Section, null, __jsx(TextField, {\n      value: rgbaColor,\n      onChange: this.handleRgbChange\n    })))), __jsx(FormLayout.Group, null), __jsx(Button, {\n      submit: true\n    }, \"Submit\"))));\n  }\n\n}\n\nexport default Postsettings;","map":{"version":3,"sources":["/Users/imac/Downloads/app/insta/pages/postsettings.js"],"names":["React","AppProvider","Button","Checkbox","Form","FormLayout","SettingToggle","TextStyle","TextField","Select","Card","Page","Popover","ColorPicker","Stack","hsbToRgb","rgbToHsb","rgbString","Postsettings","Component","constructor","props","state","color","hue","brightness","saturation","alpha","popoverActive","checkwidget","checkhover","display_border","display_border_button_name","social_sharing","social_sharing_button_name","border_width_value","widget_heading_value","handlePopoverOpen","bind","handleColorChange","handleRgbChange","handlePopoverClose","handleSelectChange","handleSelectHoveeffect","handleToggle","handleToggleSocial","handleBorderwidth","handleWidgetheading","handleLayoutCol","setState","value","rgbValues","replace","split","red","green","blue","layout_column_value","handleLayoutRow","layout_row_value","render","rgbaColor","activator","height","width","borderRadius","background","options","label","options1","content","onAction"],"mappings":"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","sourcesContent":["import React from 'react';\nimport {AppProvider,Button, Checkbox, Form, FormLayout,SettingToggle,TextStyle, TextField,Select,Card,Page,Popover,ColorPicker,Stack,hsbToRgb,rgbToHsb,rgbString} from '@shopify/polaris';\n\nimport \"@shopify/polaris/styles.css\";\n\n\n\nclass Postsettings extends React.Component {\n    constructor(props) {\n        super(props);\n\n\n        this.state = {\n            color: {\n                hue: 300,\n                brightness: 1,\n                saturation: 0.7,\n                alpha: 0.8\n\n            },\n            popoverActive: false,\n            checkwidget : 'grid', \n            checkhover : 'zoom_out',\n            display_border : true,\n            display_border_button_name : 'Enable',\n            social_sharing : true,\n            social_sharing_button_name : 'Enable',\n            border_width_value : 1,\n            widget_heading_value: ''\n        }\n\n        this.handlePopoverOpen = this.handlePopoverOpen.bind(this);\n        this.handleColorChange = this.handleColorChange.bind(this);\n        this.handleRgbChange = this.handleRgbChange.bind(this);\n        this.handlePopoverClose = this.handlePopoverClose.bind(this);\n        this.handleSelectChange = this.handleSelectChange.bind(this);\n        this.handleSelectHoveeffect = this.handleSelectHoveeffect.bind(this);\n        this.handleToggle = this.handleToggle.bind(this);\n        this.handleToggleSocial = this.handleToggleSocial.bind(this);\n        this.handleBorderwidth = this.handleBorderwidth.bind(this);\n        this.handleWidgetheading = this.handleWidgetheading.bind(this);\n        this.handleLayoutCol = this.handleLayoutCol.bind(this);\n        this.handleWidgetheading = this.handleWidgetheading.bind(this);\n\n\n    }\n\n    handleColorChange(color) {\n        this.setState({ color });\n    }\n\n\n    handleRgbChange(value) {\n        const rgbValues = value.replace(/[^\\d*.?\\d*,]/g, \"\").split(\",\");\n        const color = rgbToHsb({\n            red: rgbValues[0],\n            green: rgbValues[1],\n            blue: rgbValues[2],\n            alpha: rgbValues[3]\n        });\n        this.setState({ color });\n    }\n\n\n    handlePopoverClose() {\n        this.setState({ popoverActive: false });\n    }\n\n\n    handlePopoverOpen() {\n        this.setState({\n            popoverActive : true\n        })\n    }\n\n\n    handleSelectChange(value){\n        this.setState({\n            checkwidget :value\n        })\n    }\n\n    handleSelectHoveeffect(value){\n        this.setState({\n            checkhover :value\n        })\n    }\n\n    handleToggle(){\n\n        if(this.state.display_border == false) {\n            this.setState({\n                display_border : true,\n                display_border_button_name : 'Disable'\n            })\n        }else{\n            this.setState({\n                display_border : false,\n                display_border_button_name : 'Enable'\n            })\n        }\n\n    }\n\n    handleToggleSocial(){\n\n        if(this.state.social_sharing == false) {\n            this.setState({\n                social_sharing : true,\n                social_sharing_button_name : 'Disable'\n            })\n        }else{\n            this.setState({\n                social_sharing : false,\n                social_sharing_button_name : 'Enable'\n            })\n        }\n\n    }\n\n    handleBorderwidth(value){\n        this.setState({\n            border_width_value: value\n        })\n    }\n\n    handleWidgetheading(value){\n        this.setState({\n            widget_heading_value: value\n        })\n    }\n\n    handleLayoutCol(value){\n        this.setState({\n            layout_column_value: value\n        })\n    }\n\n    handleLayoutRow(value){\n        this.setState({\n            layout_row_value: value\n        })\n    }\n\n    render() {\n\n\n        const { color, popoverActive } = this.state;\n\n        const rgbaColor = rgbString(hsbToRgb(color));\n\n        const activator = (\n            <Button onClick={this.handlePopoverOpen}>\n                <Stack alignment=\"center\" spacing=\"tight\">\n                    <div\n                        style={{\n                            height: \"2rem\",\n                            width: \"2rem\",\n                            borderRadius: \"0.3rem\",\n                            background: rgbaColor\n                        }}\n                    />\n                    <span>Border color</span>\n                </Stack>\n            </Button>\n        );\n\n\n        // const handleSubmit = useCallback((_event) => {\n        //     setEmail('sdd');\n        //     setNewsletter(false);\n        // }, []);\n        //\n        // const handleNewsLetterChange = useCallback(\n        //     (value) => setNewsletter(value),\n        //     [],\n        // );\n        // const [selected, setSelected] = useState('grid');\n        // const [selected1, setSelected1] = useState('zoom_out');\n        // const handleSelectChange = useCallback((value) => setSelected(value), []);\n        // const handleSelectChange1 = useCallback((value) => setSelected1(value), []);\n        //\n        // const handleEmailChange = useCallback((value) => setEmail(value), []);\n\n        const options = [\n            {label: 'Grid', value: 'grid'},\n            {label: 'List', value: 'list'}\n        ];\n\n        const options1 = [\n            {label: 'Zoom Out', value: 'zoom_out'},\n            {label: 'Zoom In', value: 'zoom_in'}\n        ];\n\n\n        // const [active, setActive] = useState(false);\n        //\n        // const handleToggle = useCallback(() => setActive((active) => !active), []);\n        //\n        // const contentStatus = active ? 'Disable' : 'Enable';\n        //\n        //\n        // const [columnvalue, setcolumnvalue] = useState('1');\n        //\n        // const handleChangecolumn = useCallback((newValue) => setcolumnvalue(newValue), []);\n        //\n        // const [rowvalue, setrowvalue] = useState('1');\n        //\n        // const handleChangerow = useCallback((newValue) => setrowvalue(newValue), []);\n\n\n\n        // const [textwidthFieldValue, setTextFieldWidthValue] = useState('10.6');\n        // const [selectwidthValue, setBorderwidthValue] = useState('kg');\n\n        // const handleTextFieldwidthChange = useCallback(\n        //     (value) => setTextFieldWidthValue(value),\n        //     [],\n        // );\n        //\n        // const handleSelectwidthChange = useCallback((value) => setBorderwidthValue(value), []);\n\n\n        return <div>\n            <Form\n                // onSubmit={handleSubmit}\n            >\n                <FormLayout>\n                    <FormLayout.Group>\n\n                        <Select\n                            label=\"Widget Type\"\n                            options={options}\n                            onChange={this.handleSelectChange}\n                            value={this.state.checkwidget}\n                        />\n\n                        <Select\n                            label=\"Hover Effect\"\n                            options={options1}\n                            onChange={this.handleSelectHoveeffect}\n                            value={this.state.checkhover}\n                        />\n\n                        <SettingToggle\n                            action={{\n                                content: this.state.display_border_button_name,\n                                onAction: this.handleToggle,\n                            }}\n                            enabled={this.state.display_border}\n                        />\n\n\n                    </FormLayout.Group>\n                    <FormLayout.Group>\n                        <TextField type=\"number\" label=\"Layout Columns\" value={this.state.layout_column_value} onChange={this.handleLayoutCol} />\n                        <TextField type=\"number\" label=\"Layout Rows\" value={this.state.layout_row_value} onChange={this.handleLayoutRow} />\n                        <SettingToggle\n                            action={{\n                                content: this.state.social_sharing_button_name,\n                                onAction: this.handleToggleSocial,\n                            }}\n                             enabled={this.state.social_sharing}\n                        />\n                    </FormLayout.Group>\n                    <FormLayout.Group>\n                        <TextField\n                            label=\"Border Width\"\n                            type=\"number\"\n                            value={this.state.border_width_value}\n                            onChange={this.handleBorderwidth}\n                            connectedRight={\n                                <Select\n                                    label=\"Pixel Unit\"\n                                    labelHidden\n                                    value=\"PX\"\n                                    options={['PX']}\n                                />\n                            }\n                        />\n\n                        <TextField label=\"Widget Heading\" value={this.state.widget_heading_value} onChange={this.handleWidgetheading}\n                        />\n                        <Popover\n                            active={popoverActive}\n                            activator={activator}\n                            onClose={this.handlePopoverClose}\n                        >\n                            <Popover.Section>\n                                <ColorPicker\n                                    onChange={this.handleColorChange}\n                                    color={color}\n                                    allowAlpha\n                                />\n                            </Popover.Section>\n                            <Popover.Section>\n                                <TextField value={rgbaColor} onChange={this.handleRgbChange} />\n                            </Popover.Section>\n                        </Popover>\n\n\n                    </FormLayout.Group>\n                    <FormLayout.Group>\n\n                    </FormLayout.Group>\n\n                    <Button submit>Submit</Button>\n                </FormLayout>\n            </Form>\n        </div>;\n    }\n\n\n}\n\nexport default Postsettings;\n"]},"metadata":{},"sourceType":"module"}