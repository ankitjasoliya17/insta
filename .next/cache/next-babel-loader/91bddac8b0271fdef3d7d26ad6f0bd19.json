{"ast":null,"code":"var __jsx = React.createElement;\nimport React from 'react';\nimport { Heading, Toast, Button, Checkbox, Form, FormLayout, SettingToggle, TextStyle, TextField, Select, Card, Page, Popover, ColorPicker, Stack, hsbToRgb, rgbToHsb, rgbString } from '@shopify/polaris';\nimport axios from 'axios';\nimport \"@shopify/polaris/styles.css\";\n\nclass Postsettings extends React.Component {\n  constructor(props) {\n    super(props);\n    const allsetting = props.settings;\n\n    if (allsetting != false) {\n      let widgetcolordata = '';\n\n      if (allsetting.widgetcolor) {\n        widgetcolordata = JSON.parse(allsetting.widgetcolor);\n      } else {\n        widgetcolordata = {\n          hue: 300,\n          brightness: 1,\n          saturation: 0.7,\n          alpha: 0.8\n        };\n      }\n\n      let overlaycolordata = '';\n\n      if (allsetting.overlaycolor) {\n        overlaycolordata = JSON.parse(allsetting.overlaycolor);\n      } else {\n        overlaycolordata = {\n          hue: 300,\n          brightness: 1,\n          saturation: 0.7,\n          alpha: 0.8\n        };\n      }\n\n      let textcolordata = '';\n\n      if (allsetting.textcolor) {\n        textcolordata = JSON.parse(allsetting.textcolor);\n      } else {\n        textcolordata = {\n          hue: 300,\n          brightness: 1,\n          saturation: 0.7,\n          alpha: 0.8\n        };\n      }\n\n      let pbackgroundcolordata = '';\n\n      if (allsetting.pbackgroundcolor) {\n        pbackgroundcolordata = JSON.parse(allsetting.pbackgroundcolor);\n      } else {\n        pbackgroundcolordata = {\n          hue: 300,\n          brightness: 1,\n          saturation: 0.7,\n          alpha: 0.8\n        };\n      }\n\n      let ptextcolordata = '';\n\n      if (allsetting.ptextcolor) {\n        ptextcolordata = JSON.parse(allsetting.ptextcolor);\n      } else {\n        ptextcolordata = {\n          hue: 300,\n          brightness: 1,\n          saturation: 0.7,\n          alpha: 0.8\n        };\n      }\n\n      this.state = {\n        widgetcolor: widgetcolordata,\n        widgetpopoverActive: false,\n        overlaycolor: overlaycolordata,\n        overlaypopoverActive: false,\n        textcolor: textcolordata,\n        textpopoverActive: false,\n        pbackgroundcolor: pbackgroundcolordata,\n        pbackgroundpopoverActive: false,\n        ptextcolor: ptextcolordata,\n        ptextpopoverActive: false\n      };\n    } else {\n      this.state = {\n        widgetcolor: {\n          hue: 300,\n          brightness: 1,\n          saturation: 0.7,\n          alpha: 0.8\n        },\n        widgetpopoverActive: false,\n        overlaycolor: {\n          hue: 300,\n          brightness: 1,\n          saturation: 0.7,\n          alpha: 0.8\n        },\n        overlaypopoverActive: false,\n        textcolor: {\n          hue: 300,\n          brightness: 1,\n          saturation: 0.7,\n          alpha: 0.8\n        },\n        textpopoverActive: false,\n        pbackgroundcolor: {\n          hue: 300,\n          brightness: 1,\n          saturation: 0.7,\n          alpha: 0.8\n        },\n        pbackgroundpopoverActive: false,\n        ptextcolor: {\n          hue: 300,\n          brightness: 1,\n          saturation: 0.7,\n          alpha: 0.8\n        },\n        ptextpopoverActive: false\n      };\n    }\n\n    this.handlewidgetPopoverOpen = this.handlewidgetPopoverOpen.bind(this);\n    this.handlewidgetColorChange = this.handlewidgetColorChange.bind(this);\n    this.handlewidgetRgbChange = this.handlewidgetRgbChange.bind(this);\n    this.handlewidgetPopoverClose = this.handlewidgetPopoverClose.bind(this);\n    this.handleoverlayColorChange = this.handleoverlayColorChange.bind(this);\n    this.handleoverlayRgbChange = this.handleoverlayRgbChange.bind(this);\n    this.handleoverlayPopoverClose = this.handleoverlayPopoverClose.bind(this);\n    this.handleoverlayPopoverOpen = this.handleoverlayPopoverOpen.bind(this);\n    this.handletextColorChange = this.handletextColorChange.bind(this);\n    this.handletextRgbChange = this.handletextRgbChange.bind(this);\n    this.handletextPopoverClose = this.handletextPopoverClose.bind(this);\n    this.handletextPopoverOpen = this.handletextPopoverOpen.bind(this);\n    this.handlepbackgroundColorChange = this.handlepbackgroundColorChange.bind(this);\n    this.handlepbackgroundRgbChange = this.handlepbackgroundRgbChange.bind(this);\n    this.handlepbackgroundPopoverClose = this.handlepbackgroundPopoverClose.bind(this);\n    this.handlepbackgroundPopoverOpen = this.handlepbackgroundPopoverOpen.bind(this);\n    this.handleptextColorChange = this.handleptextColorChange.bind(this);\n    this.handleptextRgbChange = this.handleptextRgbChange.bind(this);\n    this.handleptextPopoverClose = this.handleptextPopoverClose.bind(this);\n    this.handleptextPopoverOpen = this.handleptextPopoverOpen.bind(this);\n  }\n\n  handleSubmit() {\n    this.setState({\n      button_type: true\n    });\n    const search = window.location.search; // could be '?foo=bar'\n\n    const params = new URLSearchParams(search);\n    const shop_name = params.get('shop');\n    const postdata = {\n      option: 1,\n      shop: shop_name,\n      settings: this.state\n    };\n    const self = this;\n    axios.post('http://localhost:5000/save_settings/', postdata).then(function (response1) {\n      self.changestatus();\n    }).catch(function (error) {\n      console.log(error);\n    });\n  }\n\n  changestatus() {\n    this.setState({\n      button_type: false,\n      notification_status: true\n    });\n  }\n\n  handlewidgetColorChange(widgetcolor) {\n    this.setState({\n      widgetcolor\n    });\n  }\n\n  handlewidgetRgbChange(value) {\n    const rgbValues = value.replace(/[^\\d*.?\\d*,]/g, \"\").split(\",\");\n    const widgetcolor = rgbToHsb({\n      red: rgbValues[0],\n      green: rgbValues[1],\n      blue: rgbValues[2],\n      alpha: rgbValues[3]\n    });\n    this.setState({\n      widgetcolor\n    });\n  }\n\n  handlewidgetPopoverClose() {\n    this.setState({\n      widgetpopoverActive: false\n    });\n  }\n\n  handlewidgetPopoverOpen() {\n    this.setState({\n      widgetpopoverActive: true\n    });\n  }\n\n  handleoverlayColorChange(overlaycolor) {\n    this.setState({\n      overlaycolor\n    });\n  }\n\n  handleoverlayRgbChange(value) {\n    const rgbValues = value.replace(/[^\\d*.?\\d*,]/g, \"\").split(\",\");\n    console.log(rgbValues);\n    const overlaycolor = rgbToHsb({\n      red: rgbValues[0],\n      green: rgbValues[1],\n      blue: rgbValues[2],\n      alpha: rgbValues[3]\n    });\n    this.setState({\n      overlaycolor\n    });\n  }\n\n  handleoverlayPopoverClose() {\n    this.setState({\n      overlaypopoverActive: false\n    });\n  }\n\n  handleoverlayPopoverOpen() {\n    this.setState({\n      overlaypopoverActive: true\n    });\n  }\n\n  handletextColorChange(textcolor) {\n    this.setState({\n      textcolor\n    });\n  }\n\n  handletextRgbChange(value) {\n    const rgbValues = value.replace(/[^\\d*.?\\d*,]/g, \"\").split(\",\");\n    const textcolor = rgbToHsb({\n      red: rgbValues[0],\n      green: rgbValues[1],\n      blue: rgbValues[2],\n      alpha: rgbValues[3]\n    });\n    this.setState({\n      textcolor\n    });\n  }\n\n  handletextPopoverClose() {\n    this.setState({\n      textpopoverActive: false\n    });\n  }\n\n  handletextPopoverOpen() {\n    this.setState({\n      textpopoverActive: true\n    });\n  }\n\n  handlepbackgroundColorChange(pbackgroundcolor) {\n    this.setState({\n      pbackgroundcolor\n    });\n  }\n\n  handlepbackgroundRgbChange(value) {\n    const rgbValues = value.replace(/[^\\d*.?\\d*,]/g, \"\").split(\",\");\n    const pbackgroundcolor = rgbToHsb({\n      red: rgbValues[0],\n      green: rgbValues[1],\n      blue: rgbValues[2],\n      alpha: rgbValues[3]\n    });\n    this.setState({\n      pbackgroundcolor\n    });\n  }\n\n  handlepbackgroundPopoverClose() {\n    this.setState({\n      pbackgroundpopoverActive: false\n    });\n  }\n\n  handlepbackgroundPopoverOpen() {\n    this.setState({\n      pbackgroundpopoverActive: true\n    });\n  }\n\n  handleptextColorChange(ptextcolor) {\n    this.setState({\n      ptextcolor\n    });\n  }\n\n  handleptextRgbChange(value) {\n    const rgbValues = value.replace(/[^\\d*.?\\d*,]/g, \"\").split(\",\");\n    console.log(rgbValues);\n    const ptextcolor = rgbToHsb({\n      red: rgbValues[0],\n      green: rgbValues[1],\n      blue: rgbValues[2],\n      alpha: rgbValues[3]\n    });\n    this.setState({\n      ptextcolor\n    });\n  }\n\n  handleptextPopoverClose() {\n    this.setState({\n      ptextpopoverActive: false\n    });\n  }\n\n  handleptextPopoverOpen() {\n    this.setState({\n      ptextpopoverActive: true\n    });\n  }\n\n  render() {\n    const {\n      widgetcolor,\n      widgetpopoverActive\n    } = this.state;\n    const widgetrgbaColor = rgbString(hsbToRgb(widgetcolor));\n\n    const widgetactivator = __jsx(Button, {\n      onClick: this.handlewidgetPopoverOpen\n    }, __jsx(Stack, {\n      alignment: \"center\",\n      spacing: \"tight\"\n    }, __jsx(\"div\", {\n      style: {\n        height: \"2rem\",\n        width: \"2rem\",\n        borderRadius: \"0.3rem\",\n        background: widgetrgbaColor\n      }\n    }), __jsx(\"span\", null, \"Widget color\")));\n\n    const {\n      overlaycolor,\n      overlaypopoverActive\n    } = this.state;\n    const overlayrgbaColor = rgbString(hsbToRgb(overlaycolor));\n\n    const overlayactivator = __jsx(Button, {\n      onClick: this.handleoverlayPopoverOpen\n    }, __jsx(Stack, {\n      alignment: \"center\",\n      spacing: \"tight\"\n    }, __jsx(\"div\", {\n      style: {\n        height: \"2rem\",\n        width: \"2rem\",\n        borderRadius: \"0.3rem\",\n        background: overlayrgbaColor\n      }\n    }), __jsx(\"span\", null, \"Overlay color\")));\n\n    const {\n      textcolor,\n      textpopoverActive\n    } = this.state;\n    const textrgbaColor = rgbString(hsbToRgb(textcolor));\n\n    const textactivator = __jsx(Button, {\n      onClick: this.handletextPopoverOpen\n    }, __jsx(Stack, {\n      alignment: \"center\",\n      spacing: \"tight\"\n    }, __jsx(\"div\", {\n      style: {\n        height: \"2rem\",\n        width: \"2rem\",\n        borderRadius: \"0.3rem\",\n        background: textrgbaColor\n      }\n    }), __jsx(\"span\", null, \"Text color\")));\n\n    const {\n      pbackgroundcolor,\n      pbackgroundpopoverActive\n    } = this.state;\n    const pbackgroundrgbaColor = rgbString(hsbToRgb(pbackgroundcolor));\n\n    const pbackgroundactivator = __jsx(Button, {\n      onClick: this.handlepbackgroundPopoverOpen\n    }, __jsx(Stack, {\n      alignment: \"center\",\n      spacing: \"tight\"\n    }, __jsx(\"div\", {\n      style: {\n        height: \"2rem\",\n        width: \"2rem\",\n        borderRadius: \"0.3rem\",\n        background: pbackgroundrgbaColor\n      }\n    }), __jsx(\"span\", null, \"Background color\")));\n\n    const {\n      ptextcolor,\n      ptextpopoverActive\n    } = this.state;\n    const ptextrgbaColor = rgbString(hsbToRgb(ptextcolor));\n\n    const ptextactivator = __jsx(Button, {\n      onClick: this.handleptextPopoverOpen\n    }, __jsx(Stack, {\n      alignment: \"center\",\n      spacing: \"tight\"\n    }, __jsx(\"div\", {\n      style: {\n        height: \"2rem\",\n        width: \"2rem\",\n        borderRadius: \"0.3rem\",\n        background: ptextrgbaColor\n      }\n    }), __jsx(\"span\", null, \"Text color\")));\n\n    let notification;\n\n    if (this.state.notification_status == true) {\n      notification = __jsx(Toast, {\n        content: \"Save Successfully\",\n        onDismiss: this.handlehsbToRgbtoggleActive,\n        active: true\n      });\n    }\n\n    return __jsx(\"div\", null, __jsx(Form, {\n      onSubmit: this.handleSubmit\n    }, __jsx(FormLayout, null, __jsx(Heading, null, \"Gallary\"), __jsx(FormLayout.Group, null, __jsx(Popover, {\n      active: widgetpopoverActive,\n      activator: widgetactivator,\n      onClose: this.handlewidgetPopoverClose\n    }, __jsx(Popover.Section, null, __jsx(ColorPicker, {\n      onChange: this.handlewidgetColorChange,\n      color: widgetcolor,\n      allowAlpha: true\n    })), __jsx(Popover.Section, null, __jsx(TextField, {\n      value: widgetrgbaColor,\n      onChange: this.handlewidgetRgbChange\n    }))), __jsx(Popover, {\n      active: overlaypopoverActive,\n      activator: overlayactivator,\n      onClose: this.handleoverlayPopoverClose\n    }, __jsx(Popover.Section, null, __jsx(ColorPicker, {\n      onChange: this.handleoverlayColorChange,\n      color: overlaycolor,\n      allowAlpha: true\n    })), __jsx(Popover.Section, null, __jsx(TextField, {\n      value: overlayrgbaColor,\n      onChange: this.handleoverlayRgbChange\n    }))), __jsx(Popover, {\n      active: textpopoverActive,\n      activator: textactivator,\n      onClose: this.handletextPopoverClose\n    }, __jsx(Popover.Section, null, __jsx(ColorPicker, {\n      onChange: this.handletextColorChange,\n      color: textcolor,\n      allowAlpha: true\n    })), __jsx(Popover.Section, null, __jsx(TextField, {\n      value: textrgbaColor,\n      onChange: this.handletextRgbChange\n    })))), __jsx(FormLayout.Group, null, __jsx(Popover, {\n      active: pbackgroundpopoverActive,\n      activator: pbackgroundactivator,\n      onClose: this.handlepbackgroundPopoverClose\n    }, __jsx(Popover.Section, null, __jsx(ColorPicker, {\n      onChange: this.handlepbackgroundColorChange,\n      color: pbackgroundcolor,\n      allowAlpha: true\n    })), __jsx(Popover.Section, null, __jsx(TextField, {\n      value: pbackgroundrgbaColor,\n      onChange: this.handlepbackgroundRgbChange\n    }))), __jsx(Popover, {\n      active: ptextpopoverActive,\n      activator: ptextactivator,\n      onClose: this.handleptextPopoverClose\n    }, __jsx(Popover.Section, null, __jsx(ColorPicker, {\n      onChange: this.handleptextColorChange,\n      color: ptextcolor,\n      allowAlpha: true\n    })), __jsx(Popover.Section, null, __jsx(TextField, {\n      value: ptextrgbaColor,\n      onChange: this.handleptextRgbChange\n    })))), __jsx(Button, {\n      submit: true,\n      loading: this.state.button_type,\n      primary: true\n    }, \"Submit\"))), notification);\n  }\n\n}\n\nexport default Postsettings;","map":{"version":3,"sources":["/Users/imac/Downloads/app/insta/pages/appereance.js"],"names":["React","Heading","Toast","Button","Checkbox","Form","FormLayout","SettingToggle","TextStyle","TextField","Select","Card","Page","Popover","ColorPicker","Stack","hsbToRgb","rgbToHsb","rgbString","axios","Postsettings","Component","constructor","props","allsetting","settings","widgetcolordata","widgetcolor","JSON","parse","hue","brightness","saturation","alpha","overlaycolordata","overlaycolor","textcolordata","textcolor","pbackgroundcolordata","pbackgroundcolor","ptextcolordata","ptextcolor","state","widgetpopoverActive","overlaypopoverActive","textpopoverActive","pbackgroundpopoverActive","ptextpopoverActive","handlewidgetPopoverOpen","bind","handlewidgetColorChange","handlewidgetRgbChange","handlewidgetPopoverClose","handleoverlayColorChange","handleoverlayRgbChange","handleoverlayPopoverClose","handleoverlayPopoverOpen","handletextColorChange","handletextRgbChange","handletextPopoverClose","handletextPopoverOpen","handlepbackgroundColorChange","handlepbackgroundRgbChange","handlepbackgroundPopoverClose","handlepbackgroundPopoverOpen","handleptextColorChange","handleptextRgbChange","handleptextPopoverClose","handleptextPopoverOpen","handleSubmit","setState","button_type","search","window","location","params","URLSearchParams","shop_name","get","postdata","option","shop","self","post","then","response1","changestatus","catch","error","console","log","notification_status","value","rgbValues","replace","split","red","green","blue","render","widgetrgbaColor","widgetactivator","height","width","borderRadius","background","overlayrgbaColor","overlayactivator","textrgbaColor","textactivator","pbackgroundrgbaColor","pbackgroundactivator","ptextrgbaColor","ptextactivator","notification","handlehsbToRgbtoggleActive"],"mappings":"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","sourcesContent":["import React from 'react';\nimport {Heading,Toast,Button, Checkbox, Form, FormLayout,SettingToggle,TextStyle, TextField,Select,Card,Page,Popover,ColorPicker,Stack,hsbToRgb,rgbToHsb,rgbString} from '@shopify/polaris';\nimport axios from 'axios';\n\nimport \"@shopify/polaris/styles.css\";\n\n\n\nclass Postsettings extends React.Component {\n    constructor(props) {\n        super(props);\n        const allsetting = props.settings;\n\n        if(allsetting!=false){\n\n            let widgetcolordata = '';\n            if(allsetting.widgetcolor){\n                widgetcolordata = JSON.parse(allsetting.widgetcolor);\n            }else{\n                widgetcolordata = {\n                    hue: 300,\n                    brightness: 1,\n                    saturation: 0.7,\n                    alpha: 0.8\n\n                }\n            }\n\n            let overlaycolordata = '';\n            if(allsetting.overlaycolor){\n                overlaycolordata = JSON.parse(allsetting.overlaycolor);\n            }else{\n                overlaycolordata = {\n                    hue: 300,\n                    brightness: 1,\n                    saturation: 0.7,\n                    alpha: 0.8\n\n                }\n            }\n\n            let textcolordata = '';\n            if(allsetting.textcolor){\n                textcolordata = JSON.parse(allsetting.textcolor);\n            }else{\n                textcolordata = {\n                    hue: 300,\n                    brightness: 1,\n                    saturation: 0.7,\n                    alpha: 0.8\n\n                }\n            }\n\n            let pbackgroundcolordata = '';\n            if(allsetting.pbackgroundcolor){\n                pbackgroundcolordata = JSON.parse(allsetting.pbackgroundcolor);\n            }else{\n                pbackgroundcolordata = {\n                    hue: 300,\n                    brightness: 1,\n                    saturation: 0.7,\n                    alpha: 0.8\n\n                }\n            }\n\n            let ptextcolordata = '';\n            if(allsetting.ptextcolor){\n                ptextcolordata = JSON.parse(allsetting.ptextcolor);\n            }else{\n                ptextcolordata = {\n                    hue: 300,\n                    brightness: 1,\n                    saturation: 0.7,\n                    alpha: 0.8\n\n                }\n            }\n\n            this.state = {\n                widgetcolor: widgetcolordata,\n                widgetpopoverActive: false,\n                overlaycolor: overlaycolordata,\n                overlaypopoverActive: false,\n                textcolor: textcolordata,\n                textpopoverActive: false,\n                pbackgroundcolor: pbackgroundcolordata,\n                pbackgroundpopoverActive: false,\n                ptextcolor: ptextcolordata,\n                ptextpopoverActive: false,\n            }\n        }else{\n            this.state = {\n                widgetcolor: {\n                    hue: 300,\n                    brightness: 1,\n                    saturation: 0.7,\n                    alpha: 0.8\n\n                },\n                widgetpopoverActive: false,\n                overlaycolor: {\n                    hue: 300,\n                    brightness: 1,\n                    saturation: 0.7,\n                    alpha: 0.8\n\n                },\n                overlaypopoverActive: false,\n                textcolor: {\n                    hue: 300,\n                    brightness: 1,\n                    saturation: 0.7,\n                    alpha: 0.8\n\n                },\n                textpopoverActive: false,\n                pbackgroundcolor: {\n                    hue: 300,\n                    brightness: 1,\n                    saturation: 0.7,\n                    alpha: 0.8\n\n                },\n                pbackgroundpopoverActive: false,\n                ptextcolor: {\n                    hue: 300,\n                    brightness: 1,\n                    saturation: 0.7,\n                    alpha: 0.8\n\n                },\n                ptextpopoverActive: false,\n            }\n        }\n\n\n\n        this.handlewidgetPopoverOpen = this.handlewidgetPopoverOpen.bind(this);\n        this.handlewidgetColorChange = this.handlewidgetColorChange.bind(this);\n        this.handlewidgetRgbChange = this.handlewidgetRgbChange.bind(this);\n        this.handlewidgetPopoverClose = this.handlewidgetPopoverClose.bind(this);\n\n        this.handleoverlayColorChange = this.handleoverlayColorChange.bind(this);\n        this.handleoverlayRgbChange = this.handleoverlayRgbChange.bind(this);\n        this.handleoverlayPopoverClose = this.handleoverlayPopoverClose.bind(this);\n        this.handleoverlayPopoverOpen = this.handleoverlayPopoverOpen.bind(this);\n\n        this.handletextColorChange = this.handletextColorChange.bind(this);\n        this.handletextRgbChange = this.handletextRgbChange.bind(this);\n        this.handletextPopoverClose = this.handletextPopoverClose.bind(this);\n        this.handletextPopoverOpen = this.handletextPopoverOpen.bind(this);\n\n        this.handlepbackgroundColorChange = this.handlepbackgroundColorChange.bind(this);\n        this.handlepbackgroundRgbChange = this.handlepbackgroundRgbChange.bind(this);\n        this.handlepbackgroundPopoverClose = this.handlepbackgroundPopoverClose.bind(this);\n        this.handlepbackgroundPopoverOpen = this.handlepbackgroundPopoverOpen.bind(this);\n\n        this.handleptextColorChange = this.handleptextColorChange.bind(this);\n        this.handleptextRgbChange = this.handleptextRgbChange.bind(this);\n        this.handleptextPopoverClose = this.handleptextPopoverClose.bind(this);\n        this.handleptextPopoverOpen = this.handleptextPopoverOpen.bind(this);\n\n\n\n\n    }\n\n\n    handleSubmit(){\n        this.setState({\n            button_type : true\n        })\n        const search = window.location.search; // could be '?foo=bar'\n        const params = new URLSearchParams(search);\n        const shop_name = params.get('shop');\n\n        const postdata = {\n            option : 1,\n            shop : shop_name,\n            settings : this.state\n        }\n\n        const self = this;\n        axios.post('http://localhost:5000/save_settings/',postdata)\n            .then(function (response1) {\n                self.changestatus()\n            })\n            .catch(function (error) {\n                console.log(error);\n            });\n    }\n\n    changestatus(){\n        this.setState({\n            button_type : false,\n            notification_status :true\n        })\n    }\n\n    handlewidgetColorChange(widgetcolor) {\n        this.setState({ widgetcolor });\n    }\n\n\n    handlewidgetRgbChange(value) {\n        const rgbValues = value.replace(/[^\\d*.?\\d*,]/g, \"\").split(\",\");\n\n        const widgetcolor = rgbToHsb({\n            red: rgbValues[0],\n            green: rgbValues[1],\n            blue: rgbValues[2],\n            alpha: rgbValues[3]\n        });\n        this.setState({ widgetcolor });\n    }\n\n\n    handlewidgetPopoverClose() {\n        this.setState({ widgetpopoverActive: false });\n    }\n\n\n    handlewidgetPopoverOpen() {\n        this.setState({\n            widgetpopoverActive : true\n        })\n    }\n\n\n    handleoverlayColorChange(overlaycolor) {\n        this.setState({ overlaycolor });\n    }\n\n\n    handleoverlayRgbChange(value) {\n        const rgbValues = value.replace(/[^\\d*.?\\d*,]/g, \"\").split(\",\");\n        console.log(rgbValues);\n        const overlaycolor = rgbToHsb({\n            red: rgbValues[0],\n            green: rgbValues[1],\n            blue: rgbValues[2],\n            alpha: rgbValues[3]\n        });\n        this.setState({ overlaycolor });\n    }\n\n\n    handleoverlayPopoverClose() {\n        this.setState({ overlaypopoverActive: false });\n    }\n\n\n    handleoverlayPopoverOpen() {\n        this.setState({\n            overlaypopoverActive : true\n        })\n    }\n\n\n    handletextColorChange(textcolor) {\n        this.setState({ textcolor });\n    }\n\n\n    handletextRgbChange(value) {\n        const rgbValues = value.replace(/[^\\d*.?\\d*,]/g, \"\").split(\",\");\n        const textcolor = rgbToHsb({\n            red: rgbValues[0],\n            green: rgbValues[1],\n            blue: rgbValues[2],\n            alpha: rgbValues[3]\n        });\n        this.setState({ textcolor });\n    }\n\n\n    handletextPopoverClose() {\n        this.setState({ textpopoverActive: false });\n    }\n\n\n    handletextPopoverOpen() {\n        this.setState({\n            textpopoverActive : true\n        })\n    }\n\n\n    handlepbackgroundColorChange(pbackgroundcolor) {\n        this.setState({ pbackgroundcolor });\n    }\n\n\n    handlepbackgroundRgbChange(value) {\n        const rgbValues = value.replace(/[^\\d*.?\\d*,]/g, \"\").split(\",\");\n        const pbackgroundcolor = rgbToHsb({\n            red: rgbValues[0],\n            green: rgbValues[1],\n            blue: rgbValues[2],\n            alpha: rgbValues[3]\n        });\n        this.setState({ pbackgroundcolor });\n    }\n\n\n    handlepbackgroundPopoverClose() {\n        this.setState({ pbackgroundpopoverActive: false });\n    }\n\n\n    handlepbackgroundPopoverOpen() {\n        this.setState({\n            pbackgroundpopoverActive : true\n        })\n    }\n\n\n    handleptextColorChange(ptextcolor) {\n        this.setState({ ptextcolor });\n    }\n\n\n    handleptextRgbChange(value) {\n        const rgbValues = value.replace(/[^\\d*.?\\d*,]/g, \"\").split(\",\");\n        console.log(rgbValues);\n        const ptextcolor = rgbToHsb({\n            red: rgbValues[0],\n            green: rgbValues[1],\n            blue: rgbValues[2],\n            alpha: rgbValues[3]\n        });\n        this.setState({ ptextcolor });\n    }\n\n\n    handleptextPopoverClose() {\n        this.setState({ ptextpopoverActive: false });\n    }\n\n\n    handleptextPopoverOpen() {\n        this.setState({\n            ptextpopoverActive : true\n        })\n    }\n\n    render() {\n\n        const { widgetcolor, widgetpopoverActive } = this.state;\n\n        const widgetrgbaColor = rgbString(hsbToRgb(widgetcolor));\n\n        const widgetactivator = (\n            <Button onClick={this.handlewidgetPopoverOpen}>\n                <Stack alignment=\"center\" spacing=\"tight\">\n                    <div\n                        style={{\n                            height: \"2rem\",\n                            width: \"2rem\",\n                            borderRadius: \"0.3rem\",\n                            background: widgetrgbaColor\n                        }}\n                    />\n                    <span>Widget color</span>\n                </Stack>\n            </Button>\n        );\n\n        const { overlaycolor, overlaypopoverActive } = this.state;\n\n        const overlayrgbaColor = rgbString(hsbToRgb(overlaycolor));\n\n        const overlayactivator = (\n            <Button onClick={this.handleoverlayPopoverOpen}>\n                <Stack alignment=\"center\" spacing=\"tight\">\n                    <div\n                        style={{\n                            height: \"2rem\",\n                            width: \"2rem\",\n                            borderRadius: \"0.3rem\",\n                            background: overlayrgbaColor\n                        }}\n                    />\n                    <span>Overlay color</span>\n                </Stack>\n            </Button>\n        );\n\n        const { textcolor, textpopoverActive } = this.state;\n\n        const textrgbaColor = rgbString(hsbToRgb(textcolor));\n\n        const textactivator = (\n            <Button onClick={this.handletextPopoverOpen}>\n                <Stack alignment=\"center\" spacing=\"tight\">\n                    <div\n                        style={{\n                            height: \"2rem\",\n                            width: \"2rem\",\n                            borderRadius: \"0.3rem\",\n                            background: textrgbaColor\n                        }}\n                    />\n                    <span>Text color</span>\n                </Stack>\n            </Button>\n        );\n\n        const { pbackgroundcolor, pbackgroundpopoverActive } = this.state;\n\n        const pbackgroundrgbaColor = rgbString(hsbToRgb(pbackgroundcolor));\n\n        const pbackgroundactivator = (\n            <Button onClick={this.handlepbackgroundPopoverOpen}>\n                <Stack alignment=\"center\" spacing=\"tight\">\n                    <div\n                        style={{\n                            height: \"2rem\",\n                            width: \"2rem\",\n                            borderRadius: \"0.3rem\",\n                            background: pbackgroundrgbaColor\n                        }}\n                    />\n                    <span>Background color</span>\n                </Stack>\n            </Button>\n        );\n\n        const { ptextcolor, ptextpopoverActive } = this.state;\n\n        const ptextrgbaColor = rgbString(hsbToRgb(ptextcolor));\n\n        const ptextactivator = (\n            <Button onClick={this.handleptextPopoverOpen}>\n                <Stack alignment=\"center\" spacing=\"tight\">\n                    <div\n                        style={{\n                            height: \"2rem\",\n                            width: \"2rem\",\n                            borderRadius: \"0.3rem\",\n                            background: ptextrgbaColor\n                        }}\n                    />\n                    <span>Text color</span>\n                </Stack>\n            </Button>\n        );\n\n        let notification;\n\n        if(this.state.notification_status==true){\n            notification = (\n                <Toast content=\"Save Successfully\" onDismiss={this.handlehsbToRgbtoggleActive} active />\n            );\n        }\n\n\n        return <div>\n            <Form\n                onSubmit={this.handleSubmit}\n            >\n                <FormLayout>\n                    <Heading>Gallary</Heading>\n                    <FormLayout.Group>\n\n                        <Popover\n                            active={widgetpopoverActive}\n                            activator={widgetactivator}\n                            onClose={this.handlewidgetPopoverClose}\n                        >\n                            <Popover.Section>\n                                <ColorPicker\n                                    onChange={this.handlewidgetColorChange}\n                                    color={widgetcolor}\n                                    allowAlpha\n                                />\n                            </Popover.Section>\n                            <Popover.Section>\n                                <TextField value={widgetrgbaColor} onChange={this.handlewidgetRgbChange} />\n                            </Popover.Section>\n                        </Popover>\n\n\n                        <Popover\n                            active={overlaypopoverActive}\n                            activator={overlayactivator}\n                            onClose={this.handleoverlayPopoverClose}\n                        >\n                            <Popover.Section>\n                                <ColorPicker\n                                    onChange={this.handleoverlayColorChange}\n                                    color={overlaycolor}\n                                    allowAlpha\n                                />\n                            </Popover.Section>\n                            <Popover.Section>\n                                <TextField value={overlayrgbaColor} onChange={this.handleoverlayRgbChange} />\n                            </Popover.Section>\n                        </Popover>\n\n                        <Popover\n                            active={textpopoverActive}\n                            activator={textactivator}\n                            onClose={this.handletextPopoverClose}\n                        >\n                            <Popover.Section>\n                                <ColorPicker\n                                    onChange={this.handletextColorChange}\n                                    color={textcolor}\n                                    allowAlpha\n                                />\n                            </Popover.Section>\n                            <Popover.Section>\n                                <TextField value={textrgbaColor} onChange={this.handletextRgbChange} />\n                            </Popover.Section>\n                        </Popover>\n\n                    </FormLayout.Group>\n\n\n                    <FormLayout.Group>\n\n                        <Popover\n                            active={pbackgroundpopoverActive}\n                            activator={pbackgroundactivator}\n                            onClose={this.handlepbackgroundPopoverClose}\n                        >\n                            <Popover.Section>\n                                <ColorPicker\n                                    onChange={this.handlepbackgroundColorChange}\n                                    color={pbackgroundcolor}\n                                    allowAlpha\n                                />\n                            </Popover.Section>\n                            <Popover.Section>\n                                <TextField value={pbackgroundrgbaColor} onChange={this.handlepbackgroundRgbChange} />\n                            </Popover.Section>\n                        </Popover>\n\n\n                        <Popover\n                            active={ptextpopoverActive}\n                            activator={ptextactivator}\n                            onClose={this.handleptextPopoverClose}\n                        >\n                            <Popover.Section>\n                                <ColorPicker\n                                    onChange={this.handleptextColorChange}\n                                    color={ptextcolor}\n                                    allowAlpha\n                                />\n                            </Popover.Section>\n                            <Popover.Section>\n                                <TextField value={ptextrgbaColor} onChange={this.handleptextRgbChange} />\n                            </Popover.Section>\n                        </Popover>\n\n\n                    </FormLayout.Group>\n\n\n                    <Button submit loading={this.state.button_type} primary>Submit</Button>\n                </FormLayout>\n            </Form>\n\n            {notification}\n\n\n        </div>;\n    }\n\n\n}\n\nexport default Postsettings;\n"]},"metadata":{},"sourceType":"module"}