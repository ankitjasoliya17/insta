{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nvar __jsx = React.createElement;\n\nfunction _createSuper(Derived) { return function () { var Super = _getPrototypeOf(Derived), result; if (_isNativeReflectConstruct()) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { useCallback, useState } from 'react';\nimport { AppProvider, Button, Checkbox, Form, FormLayout, SettingToggle, TextStyle, TextField, Select, Card, Page, Popover, ColorPicker, Stack, hsbToRgb, rgbToHsb, rgbString } from '@shopify/polaris';\nimport { autobind } from \"@shopify/javascript-utilities/decorators\";\nimport \"@shopify/polaris/styles.css\";\n\nvar Postsettings = /*#__PURE__*/function (_React$Component) {\n  _inherits(Postsettings, _React$Component);\n\n  var _super = _createSuper(Postsettings);\n\n  function Postsettings(props) {\n    var _this;\n\n    _classCallCheck(this, Postsettings);\n\n    _this = _super.call(this, props);\n\n    _defineProperty(_assertThisInitialized(_this), \"state\", {\n      color: {\n        hue: 300,\n        brightness: 1,\n        saturation: 0.7,\n        alpha: 0.8\n      },\n      popoverActive: false\n    });\n\n    return _this;\n  }\n\n  _createClass(Postsettings, [{\n    key: \"handleColorChange\",\n    value: function handleColorChange(color) {\n      this.setState({\n        color: color\n      });\n    }\n  }, {\n    key: \"handleRgbChange\",\n    value: function handleRgbChange(value) {\n      var rgbValues = value.replace(/[^\\d*.?\\d*,]/g, \"\").split(\",\");\n      var color = rgbToHsb({\n        red: rgbValues[0],\n        green: rgbValues[1],\n        blue: rgbValues[2],\n        alpha: rgbValues[3]\n      });\n      this.setState({\n        color: color\n      });\n    }\n  }, {\n    key: \"handlePopoverClose\",\n    value: function handlePopoverClose() {\n      this.setState({\n        popoverActive: false\n      });\n    }\n  }, {\n    key: \"handlePopoverOpen\",\n    value: function handlePopoverOpen() {\n      this.setState({\n        popoverActive: true\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return __jsx(\"div\", null, __jsx(FormOnSubmitExample, null));\n    }\n  }]);\n\n  return Postsettings;\n}(React.Component);\n\nexport default Postsettings;\n\nfunction FormOnSubmitExample() {\n  var _useState = useState(false),\n      newsletter = _useState[0],\n      setNewsletter = _useState[1];\n\n  var _useState2 = useState(''),\n      email = _useState2[0],\n      setEmail = _useState2[1];\n\n  var handleSubmit = useCallback(function (_event) {\n    setEmail('sdd');\n    setNewsletter(false);\n  }, []);\n  var handleNewsLetterChange = useCallback(function (value) {\n    return setNewsletter(value);\n  }, []);\n\n  var _useState3 = useState('grid'),\n      selected = _useState3[0],\n      setSelected = _useState3[1];\n\n  var _useState4 = useState('zoom_out'),\n      selected1 = _useState4[0],\n      setSelected1 = _useState4[1];\n\n  var handleSelectChange = useCallback(function (value) {\n    return setSelected(value);\n  }, []);\n  var handleSelectChange1 = useCallback(function (value) {\n    return setSelected1(value);\n  }, []);\n  var handleEmailChange = useCallback(function (value) {\n    return setEmail(value);\n  }, []);\n  var options = [{\n    label: 'Grid',\n    value: 'grid'\n  }, {\n    label: 'List',\n    value: 'list'\n  }];\n  var options1 = [{\n    label: 'Zoom Out',\n    value: 'zoom_out'\n  }, {\n    label: 'Zoom In',\n    value: 'zoom_in'\n  }];\n\n  var _useState5 = useState(false),\n      active = _useState5[0],\n      setActive = _useState5[1];\n\n  var handleToggle = useCallback(function () {\n    return setActive(function (active) {\n      return !active;\n    });\n  }, []);\n  var contentStatus = active ? 'Disable' : 'Enable';\n\n  var _useState6 = useState('1'),\n      columnvalue = _useState6[0],\n      setcolumnvalue = _useState6[1];\n\n  var handleChangecolumn = useCallback(function (newValue) {\n    return setcolumnvalue(newValue);\n  }, []);\n\n  var _useState7 = useState('1'),\n      rowvalue = _useState7[0],\n      setrowvalue = _useState7[1];\n\n  var handleChangerow = useCallback(function (newValue) {\n    return setrowvalue(newValue);\n  }, []);\n\n  var _useState8 = useState('10.6'),\n      textwidthFieldValue = _useState8[0],\n      setTextFieldWidthValue = _useState8[1];\n\n  var _useState9 = useState('kg'),\n      selectwidthValue = _useState9[0],\n      setBorderwidthValue = _useState9[1];\n\n  var handleTextFieldwidthChange = useCallback(function (value) {\n    return setTextFieldWidthValue(value);\n  }, []);\n  var handleSelectwidthChange = useCallback(function (value) {\n    return setBorderwidthValue(value);\n  }, []);\n  return __jsx(Form, {\n    onSubmit: handleSubmit\n  }, __jsx(FormLayout, null, __jsx(FormLayout.Group, null, __jsx(Select, {\n    label: \"Widget Type\",\n    options: options,\n    onChange: handleSelectChange,\n    value: selected\n  }), __jsx(Select, {\n    label: \"Hover Effect\",\n    options: options1,\n    onChange: handleSelectChange1,\n    value: selected1\n  }), __jsx(SettingToggle, {\n    action: {\n      content: contentStatus,\n      onAction: handleToggle\n    },\n    enabled: active\n  })), __jsx(FormLayout.Group, null, __jsx(TextField, {\n    type: \"number\",\n    label: \"Layout Columns\",\n    value: columnvalue,\n    onChange: handleChangecolumn\n  }), __jsx(TextField, {\n    type: \"number\",\n    label: \"Layout Rows\",\n    value: rowvalue,\n    onChange: handleChangerow\n  }), __jsx(SettingToggle, {\n    action: {\n      content: contentStatus,\n      onAction: handleToggle\n    },\n    enabled: active\n  })), __jsx(FormLayout.Group, null, __jsx(TextField, {\n    label: \"Border Width\",\n    type: \"number\",\n    value: textwidthFieldValue,\n    onChange: handleTextFieldwidthChange,\n    connectedRight: __jsx(Select, {\n      value: selectwidthValue,\n      label: \"Pixel Unit\",\n      onChange: handleSelectwidthChange,\n      labelHidden: true,\n      options: ['PX']\n    })\n  }), __jsx(TextField, {\n    label: \"Widget Heading\",\n    value: columnvalue,\n    onChange: handleChangecolumn\n  }), __jsx(TextField, {\n    label: \"Border Color\",\n    type: \"color\",\n    value: columnvalue,\n    onChange: handleChangecolumn\n  })), __jsx(Button, {\n    submit: true\n  }, \"Submit\")));\n}","map":{"version":3,"sources":["/Users/imac/Downloads/app/insta/pages/postsettings.js"],"names":["React","useCallback","useState","AppProvider","Button","Checkbox","Form","FormLayout","SettingToggle","TextStyle","TextField","Select","Card","Page","Popover","ColorPicker","Stack","hsbToRgb","rgbToHsb","rgbString","autobind","Postsettings","props","color","hue","brightness","saturation","alpha","popoverActive","setState","value","rgbValues","replace","split","red","green","blue","Component","FormOnSubmitExample","newsletter","setNewsletter","email","setEmail","handleSubmit","_event","handleNewsLetterChange","selected","setSelected","selected1","setSelected1","handleSelectChange","handleSelectChange1","handleEmailChange","options","label","options1","active","setActive","handleToggle","contentStatus","columnvalue","setcolumnvalue","handleChangecolumn","newValue","rowvalue","setrowvalue","handleChangerow","textwidthFieldValue","setTextFieldWidthValue","selectwidthValue","setBorderwidthValue","handleTextFieldwidthChange","handleSelectwidthChange","content","onAction"],"mappings":";;;;;;;;;;;;;AAAA,OAAOA,KAAP,IAAeC,WAAf,EAA4BC,QAA5B,QAA2C,OAA3C;AACA,SAAQC,WAAR,EAAoBC,MAApB,EAA4BC,QAA5B,EAAsCC,IAAtC,EAA4CC,UAA5C,EAAuDC,aAAvD,EAAqEC,SAArE,EAAgFC,SAAhF,EAA0FC,MAA1F,EAAiGC,IAAjG,EAAsGC,IAAtG,EAA2GC,OAA3G,EAAmHC,WAAnH,EAA+HC,KAA/H,EAAqIC,QAArI,EAA8IC,QAA9I,EAAuJC,SAAvJ,QAAuK,kBAAvK;AACA,SAASC,QAAT,QAAyB,0CAAzB;AACA,OAAO,6BAAP;;IAIMC,Y;;;;;AACF,wBAAYC,KAAZ,EAAmB;AAAA;;AAAA;;AACf,8BAAMA,KAAN;;AADe,4DAMX;AACJC,MAAAA,KAAK,EAAE;AACHC,QAAAA,GAAG,EAAE,GADF;AAEHC,QAAAA,UAAU,EAAE,CAFT;AAGHC,QAAAA,UAAU,EAAE,GAHT;AAIHC,QAAAA,KAAK,EAAE;AAJJ,OADH;AAOJC,MAAAA,aAAa,EAAE;AAPX,KANW;;AAAA;AAIlB;;;;sCAYiBL,K,EAAO;AACrB,WAAKM,QAAL,CAAc;AAAEN,QAAAA,KAAK,EAALA;AAAF,OAAd;AACH;;;oCAGeO,K,EAAO;AACnB,UAAMC,SAAS,GAAGD,KAAK,CAACE,OAAN,CAAc,eAAd,EAA+B,EAA/B,EAAmCC,KAAnC,CAAyC,GAAzC,CAAlB;AACA,UAAMV,KAAK,GAAGL,QAAQ,CAAC;AACnBgB,QAAAA,GAAG,EAAEH,SAAS,CAAC,CAAD,CADK;AAEnBI,QAAAA,KAAK,EAAEJ,SAAS,CAAC,CAAD,CAFG;AAGnBK,QAAAA,IAAI,EAAEL,SAAS,CAAC,CAAD,CAHI;AAInBJ,QAAAA,KAAK,EAAEI,SAAS,CAAC,CAAD;AAJG,OAAD,CAAtB;AAMA,WAAKF,QAAL,CAAc;AAAEN,QAAAA,KAAK,EAALA;AAAF,OAAd;AACH;;;yCAGoB;AACjB,WAAKM,QAAL,CAAc;AAAED,QAAAA,aAAa,EAAE;AAAjB,OAAd;AACH;;;wCAGmB;AAChB,WAAKC,QAAL,CAAc;AAAED,QAAAA,aAAa,EAAE;AAAjB,OAAd;AACH;;;6BAGQ;AAEL,aAAO,mBACH,MAAC,mBAAD,OADG,CAAP;AAGH;;;;EAjDsB5B,KAAK,CAACqC,S;;AAsDjC,eAAehB,YAAf;;AAGA,SAASiB,mBAAT,GAA+B;AAAA,kBACSpC,QAAQ,CAAC,KAAD,CADjB;AAAA,MACpBqC,UADoB;AAAA,MACRC,aADQ;;AAAA,mBAEDtC,QAAQ,CAAC,EAAD,CAFP;AAAA,MAEpBuC,KAFoB;AAAA,MAEbC,QAFa;;AAI3B,MAAMC,YAAY,GAAG1C,WAAW,CAAC,UAAC2C,MAAD,EAAY;AACzCF,IAAAA,QAAQ,CAAC,KAAD,CAAR;AACAF,IAAAA,aAAa,CAAC,KAAD,CAAb;AACH,GAH+B,EAG7B,EAH6B,CAAhC;AAKA,MAAMK,sBAAsB,GAAG5C,WAAW,CACtC,UAAC6B,KAAD;AAAA,WAAWU,aAAa,CAACV,KAAD,CAAxB;AAAA,GADsC,EAEtC,EAFsC,CAA1C;;AAT2B,mBAaK5B,QAAQ,CAAC,MAAD,CAbb;AAAA,MAapB4C,QAboB;AAAA,MAaVC,WAbU;;AAAA,mBAcO7C,QAAQ,CAAC,UAAD,CAdf;AAAA,MAcpB8C,SAdoB;AAAA,MAcTC,YAdS;;AAe3B,MAAMC,kBAAkB,GAAGjD,WAAW,CAAC,UAAC6B,KAAD;AAAA,WAAWiB,WAAW,CAACjB,KAAD,CAAtB;AAAA,GAAD,EAAgC,EAAhC,CAAtC;AACA,MAAMqB,mBAAmB,GAAGlD,WAAW,CAAC,UAAC6B,KAAD;AAAA,WAAWmB,YAAY,CAACnB,KAAD,CAAvB;AAAA,GAAD,EAAiC,EAAjC,CAAvC;AAEA,MAAMsB,iBAAiB,GAAGnD,WAAW,CAAC,UAAC6B,KAAD;AAAA,WAAWY,QAAQ,CAACZ,KAAD,CAAnB;AAAA,GAAD,EAA6B,EAA7B,CAArC;AAEA,MAAMuB,OAAO,GAAG,CACZ;AAACC,IAAAA,KAAK,EAAE,MAAR;AAAgBxB,IAAAA,KAAK,EAAE;AAAvB,GADY,EAEZ;AAACwB,IAAAA,KAAK,EAAE,MAAR;AAAgBxB,IAAAA,KAAK,EAAE;AAAvB,GAFY,CAAhB;AAKA,MAAMyB,QAAQ,GAAG,CACb;AAACD,IAAAA,KAAK,EAAE,UAAR;AAAoBxB,IAAAA,KAAK,EAAE;AAA3B,GADa,EAEb;AAACwB,IAAAA,KAAK,EAAE,SAAR;AAAmBxB,IAAAA,KAAK,EAAE;AAA1B,GAFa,CAAjB;;AAzB2B,mBA8BC5B,QAAQ,CAAC,KAAD,CA9BT;AAAA,MA8BpBsD,MA9BoB;AAAA,MA8BZC,SA9BY;;AAgC3B,MAAMC,YAAY,GAAGzD,WAAW,CAAC;AAAA,WAAMwD,SAAS,CAAC,UAACD,MAAD;AAAA,aAAY,CAACA,MAAb;AAAA,KAAD,CAAf;AAAA,GAAD,EAAuC,EAAvC,CAAhC;AAEA,MAAMG,aAAa,GAAGH,MAAM,GAAG,SAAH,GAAe,QAA3C;;AAlC2B,mBAqCWtD,QAAQ,CAAC,GAAD,CArCnB;AAAA,MAqCpB0D,WArCoB;AAAA,MAqCPC,cArCO;;AAuC3B,MAAMC,kBAAkB,GAAG7D,WAAW,CAAC,UAAC8D,QAAD;AAAA,WAAcF,cAAc,CAACE,QAAD,CAA5B;AAAA,GAAD,EAAyC,EAAzC,CAAtC;;AAvC2B,mBAyCK7D,QAAQ,CAAC,GAAD,CAzCb;AAAA,MAyCpB8D,QAzCoB;AAAA,MAyCVC,WAzCU;;AA2C3B,MAAMC,eAAe,GAAGjE,WAAW,CAAC,UAAC8D,QAAD;AAAA,WAAcE,WAAW,CAACF,QAAD,CAAzB;AAAA,GAAD,EAAsC,EAAtC,CAAnC;;AA3C2B,mBA+C2B7D,QAAQ,CAAC,MAAD,CA/CnC;AAAA,MA+CpBiE,mBA/CoB;AAAA,MA+CCC,sBA/CD;;AAAA,mBAgDqBlE,QAAQ,CAAC,IAAD,CAhD7B;AAAA,MAgDpBmE,gBAhDoB;AAAA,MAgDFC,mBAhDE;;AAkD3B,MAAMC,0BAA0B,GAAGtE,WAAW,CAC1C,UAAC6B,KAAD;AAAA,WAAWsC,sBAAsB,CAACtC,KAAD,CAAjC;AAAA,GAD0C,EAE1C,EAF0C,CAA9C;AAKA,MAAM0C,uBAAuB,GAAGvE,WAAW,CAAC,UAAC6B,KAAD;AAAA,WAAWwC,mBAAmB,CAACxC,KAAD,CAA9B;AAAA,GAAD,EAAwC,EAAxC,CAA3C;AAOA,SACI,MAAC,IAAD;AAAM,IAAA,QAAQ,EAAEa;AAAhB,KACI,MAAC,UAAD,QACA,MAAC,UAAD,CAAY,KAAZ,QAEI,MAAC,MAAD;AACI,IAAA,KAAK,EAAC,aADV;AAEI,IAAA,OAAO,EAAEU,OAFb;AAGI,IAAA,QAAQ,EAAEH,kBAHd;AAII,IAAA,KAAK,EAAEJ;AAJX,IAFJ,EASI,MAAC,MAAD;AACI,IAAA,KAAK,EAAC,cADV;AAEI,IAAA,OAAO,EAAES,QAFb;AAGI,IAAA,QAAQ,EAAEJ,mBAHd;AAII,IAAA,KAAK,EAAEH;AAJX,IATJ,EAgBI,MAAC,aAAD;AACI,IAAA,MAAM,EAAE;AACJyB,MAAAA,OAAO,EAAEd,aADL;AAEJe,MAAAA,QAAQ,EAAEhB;AAFN,KADZ;AAKI,IAAA,OAAO,EAAEF;AALb,IAhBJ,CADA,EA2BE,MAAC,UAAD,CAAY,KAAZ,QACI,MAAC,SAAD;AAAW,IAAA,IAAI,EAAC,QAAhB;AAAyB,IAAA,KAAK,EAAC,gBAA/B;AAAgD,IAAA,KAAK,EAAEI,WAAvD;AAAoE,IAAA,QAAQ,EAAEE;AAA9E,IADJ,EAEI,MAAC,SAAD;AAAW,IAAA,IAAI,EAAC,QAAhB;AAAyB,IAAA,KAAK,EAAC,aAA/B;AAA6C,IAAA,KAAK,EAAEE,QAApD;AAA8D,IAAA,QAAQ,EAAEE;AAAxE,IAFJ,EAGI,MAAC,aAAD;AACI,IAAA,MAAM,EAAE;AACJO,MAAAA,OAAO,EAAEd,aADL;AAEJe,MAAAA,QAAQ,EAAEhB;AAFN,KADZ;AAKI,IAAA,OAAO,EAAEF;AALb,IAHJ,CA3BF,EAsCI,MAAC,UAAD,CAAY,KAAZ,QACI,MAAC,SAAD;AACI,IAAA,KAAK,EAAC,cADV;AAEI,IAAA,IAAI,EAAC,QAFT;AAGI,IAAA,KAAK,EAAEW,mBAHX;AAII,IAAA,QAAQ,EAAEI,0BAJd;AAKI,IAAA,cAAc,EACV,MAAC,MAAD;AACI,MAAA,KAAK,EAAEF,gBADX;AAEI,MAAA,KAAK,EAAC,YAFV;AAGI,MAAA,QAAQ,EAAEG,uBAHd;AAII,MAAA,WAAW,MAJf;AAKI,MAAA,OAAO,EAAE,CAAC,IAAD;AALb;AANR,IADJ,EAiBI,MAAC,SAAD;AAAW,IAAA,KAAK,EAAC,gBAAjB;AAAkC,IAAA,KAAK,EAAEZ,WAAzC;AAAsD,IAAA,QAAQ,EAAEE;AAAhE,IAjBJ,EAkBI,MAAC,SAAD;AAAW,IAAA,KAAK,EAAC,cAAjB;AAAgC,IAAA,IAAI,EAAC,OAArC;AAA6C,IAAA,KAAK,EAAEF,WAApD;AAAiE,IAAA,QAAQ,EAAEE;AAA3E,IAlBJ,CAtCJ,EA6DI,MAAC,MAAD;AAAQ,IAAA,MAAM;AAAd,cA7DJ,CADJ,CADJ;AAmEH","sourcesContent":["import React, {useCallback, useState} from 'react';\nimport {AppProvider,Button, Checkbox, Form, FormLayout,SettingToggle,TextStyle, TextField,Select,Card,Page,Popover,ColorPicker,Stack,hsbToRgb,rgbToHsb,rgbString} from '@shopify/polaris';\nimport { autobind } from \"@shopify/javascript-utilities/decorators\";\nimport \"@shopify/polaris/styles.css\";\n\n\n\nclass Postsettings extends React.Component {\n    constructor(props) {\n        super(props);\n\n\n    }\n\n    state = {\n        color: {\n            hue: 300,\n            brightness: 1,\n            saturation: 0.7,\n            alpha: 0.8\n        },\n        popoverActive: false\n    };\n\n    handleColorChange(color) {\n        this.setState({ color });\n    }\n\n\n    handleRgbChange(value) {\n        const rgbValues = value.replace(/[^\\d*.?\\d*,]/g, \"\").split(\",\");\n        const color = rgbToHsb({\n            red: rgbValues[0],\n            green: rgbValues[1],\n            blue: rgbValues[2],\n            alpha: rgbValues[3]\n        });\n        this.setState({ color });\n    }\n\n\n    handlePopoverClose() {\n        this.setState({ popoverActive: false });\n    }\n\n\n    handlePopoverOpen() {\n        this.setState({ popoverActive: true });\n    }\n\n\n    render() {\n\n        return <div>\n            <FormOnSubmitExample />\n        </div>;\n    }\n\n\n}\n\nexport default Postsettings;\n\n\nfunction FormOnSubmitExample() {\n    const [newsletter, setNewsletter] = useState(false);\n    const [email, setEmail] = useState('');\n\n    const handleSubmit = useCallback((_event) => {\n        setEmail('sdd');\n        setNewsletter(false);\n    }, []);\n\n    const handleNewsLetterChange = useCallback(\n        (value) => setNewsletter(value),\n        [],\n    );\n    const [selected, setSelected] = useState('grid');\n    const [selected1, setSelected1] = useState('zoom_out');\n    const handleSelectChange = useCallback((value) => setSelected(value), []);\n    const handleSelectChange1 = useCallback((value) => setSelected1(value), []);\n\n    const handleEmailChange = useCallback((value) => setEmail(value), []);\n\n    const options = [\n        {label: 'Grid', value: 'grid'},\n        {label: 'List', value: 'list'}\n    ];\n\n    const options1 = [\n        {label: 'Zoom Out', value: 'zoom_out'},\n        {label: 'Zoom In', value: 'zoom_in'}\n    ];\n\n    const [active, setActive] = useState(false);\n\n    const handleToggle = useCallback(() => setActive((active) => !active), []);\n\n    const contentStatus = active ? 'Disable' : 'Enable';\n\n\n    const [columnvalue, setcolumnvalue] = useState('1');\n\n    const handleChangecolumn = useCallback((newValue) => setcolumnvalue(newValue), []);\n\n    const [rowvalue, setrowvalue] = useState('1');\n\n    const handleChangerow = useCallback((newValue) => setrowvalue(newValue), []);\n\n\n\n    const [textwidthFieldValue, setTextFieldWidthValue] = useState('10.6');\n    const [selectwidthValue, setBorderwidthValue] = useState('kg');\n\n    const handleTextFieldwidthChange = useCallback(\n        (value) => setTextFieldWidthValue(value),\n        [],\n    );\n\n    const handleSelectwidthChange = useCallback((value) => setBorderwidthValue(value), []);\n\n\n\n\n\n\n    return (\n        <Form onSubmit={handleSubmit}>\n            <FormLayout>\n            <FormLayout.Group>\n\n                <Select\n                    label=\"Widget Type\"\n                    options={options}\n                    onChange={handleSelectChange}\n                    value={selected}\n                />\n\n                <Select\n                    label=\"Hover Effect\"\n                    options={options1}\n                    onChange={handleSelectChange1}\n                    value={selected1}\n                />\n\n                <SettingToggle\n                    action={{\n                        content: contentStatus,\n                        onAction: handleToggle,\n                    }}\n                    enabled={active}\n                />\n\n\n            </FormLayout.Group>\n              <FormLayout.Group>\n                  <TextField type=\"number\" label=\"Layout Columns\" value={columnvalue} onChange={handleChangecolumn} />\n                  <TextField type=\"number\" label=\"Layout Rows\" value={rowvalue} onChange={handleChangerow} />\n                  <SettingToggle\n                      action={{\n                          content: contentStatus,\n                          onAction: handleToggle,\n                      }}\n                      enabled={active}\n                  />\n              </FormLayout.Group>\n                <FormLayout.Group>\n                    <TextField\n                        label=\"Border Width\"\n                        type=\"number\"\n                        value={textwidthFieldValue}\n                        onChange={handleTextFieldwidthChange}\n                        connectedRight={\n                            <Select\n                                value={selectwidthValue}\n                                label=\"Pixel Unit\"\n                                onChange={handleSelectwidthChange}\n                                labelHidden\n                                options={['PX']}\n                            />\n                        }\n                    />\n\n                    <TextField label=\"Widget Heading\" value={columnvalue} onChange={handleChangecolumn} />\n                    <TextField label=\"Border Color\" type=\"color\" value={columnvalue} onChange={handleChangecolumn} />\n\n\n                </FormLayout.Group>\n\n                <Button submit>Submit</Button>\n            </FormLayout>\n        </Form>\n    );\n}"]},"metadata":{},"sourceType":"module"}