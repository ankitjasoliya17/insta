{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { useCallback, useState } from 'react';\nimport { AppProvider, Button, Checkbox, Form, FormLayout, SettingToggle, TextStyle, TextField, Select, Card, Page, Popover, ColorPicker, Stack, hsbToRgb, rgbToHsb, rgbString } from '@shopify/polaris';\nimport { autobind } from \"@shopify/javascript-utilities/decorators\";\nimport \"@shopify/polaris/styles.css\";\n\nclass Postsettings extends React.Component {\n  constructor(props) {\n    super(props);\n\n    _defineProperty(this, \"state\", {\n      color: {\n        hue: 300,\n        brightness: 1,\n        saturation: 0.7,\n        alpha: 0.8\n      },\n      popoverActive: false\n    });\n  }\n\n  handleColorChange(color) {\n    this.setState({\n      color\n    });\n  }\n\n  handleRgbChange(value) {\n    const rgbValues = value.replace(/[^\\d*.?\\d*,]/g, \"\").split(\",\");\n    const color = rgbToHsb({\n      red: rgbValues[0],\n      green: rgbValues[1],\n      blue: rgbValues[2],\n      alpha: rgbValues[3]\n    });\n    this.setState({\n      color\n    });\n  }\n\n  handlePopoverClose() {\n    this.setState({\n      popoverActive: false\n    });\n  }\n\n  handlePopoverOpen() {\n    this.setState({\n      popoverActive: true\n    });\n  }\n\n  render() {\n    const {\n      color,\n      popoverActive\n    } = this.state;\n    const rgbaColor = rgbString(hsbToRgb(color));\n\n    const activator = __jsx(Button, {\n      onClick: this.handlePopoverOpen\n    }, __jsx(Stack, {\n      alignment: \"center\",\n      spacing: \"tight\"\n    }, __jsx(\"div\", {\n      style: {\n        height: \"2rem\",\n        width: \"2rem\",\n        borderRadius: \"0.3rem\",\n        background: rgbaColor\n      }\n    }), __jsx(\"span\", null, \"Primary color\"))); // const handleSubmit = useCallback((_event) => {\n    //     setEmail('sdd');\n    //     setNewsletter(false);\n    // }, []);\n    //\n    // const handleNewsLetterChange = useCallback(\n    //     (value) => setNewsletter(value),\n    //     [],\n    // );\n    // const [selected, setSelected] = useState('grid');\n    // const [selected1, setSelected1] = useState('zoom_out');\n    // const handleSelectChange = useCallback((value) => setSelected(value), []);\n    // const handleSelectChange1 = useCallback((value) => setSelected1(value), []);\n    //\n    // const handleEmailChange = useCallback((value) => setEmail(value), []);\n\n\n    const options = [{\n      label: 'Grid',\n      value: 'grid'\n    }, {\n      label: 'List',\n      value: 'list'\n    }];\n    const options1 = [{\n      label: 'Zoom Out',\n      value: 'zoom_out'\n    }, {\n      label: 'Zoom In',\n      value: 'zoom_in'\n    }]; // const [active, setActive] = useState(false);\n    //\n    // const handleToggle = useCallback(() => setActive((active) => !active), []);\n    //\n    // const contentStatus = active ? 'Disable' : 'Enable';\n    //\n    //\n    // const [columnvalue, setcolumnvalue] = useState('1');\n    //\n    // const handleChangecolumn = useCallback((newValue) => setcolumnvalue(newValue), []);\n    //\n    // const [rowvalue, setrowvalue] = useState('1');\n    //\n    // const handleChangerow = useCallback((newValue) => setrowvalue(newValue), []);\n    // const [textwidthFieldValue, setTextFieldWidthValue] = useState('10.6');\n    // const [selectwidthValue, setBorderwidthValue] = useState('kg');\n\n    const handleTextFieldwidthChange = useCallback(value => setTextFieldWidthValue(value), []);\n    const handleSelectwidthChange = useCallback(value => setBorderwidthValue(value), []);\n    return __jsx(\"div\", null, __jsx(Form // onSubmit={handleSubmit}\n    , null, __jsx(FormLayout, null, __jsx(FormLayout.Group, null, __jsx(Popover, {\n      active: popoverActive,\n      activator: activator,\n      onClose: this.handlePopoverClose\n    }, __jsx(Popover.Section, null, __jsx(ColorPicker, {\n      onChange: this.handleColorChange,\n      color: color,\n      allowAlpha: true\n    })), __jsx(Popover.Section, null, __jsx(TextField, {\n      value: rgbaColor,\n      onChange: this.handleRgbChange\n    })))), __jsx(Button, {\n      submit: true\n    }, \"Submit\"))));\n  }\n\n}\n\nexport default Postsettings;","map":{"version":3,"sources":["/Users/imac/Downloads/app/insta/pages/postsettings.js"],"names":["React","useCallback","useState","AppProvider","Button","Checkbox","Form","FormLayout","SettingToggle","TextStyle","TextField","Select","Card","Page","Popover","ColorPicker","Stack","hsbToRgb","rgbToHsb","rgbString","autobind","Postsettings","Component","constructor","props","color","hue","brightness","saturation","alpha","popoverActive","handleColorChange","setState","handleRgbChange","value","rgbValues","replace","split","red","green","blue","handlePopoverClose","handlePopoverOpen","render","state","rgbaColor","activator","height","width","borderRadius","background","options","label","options1","handleTextFieldwidthChange","setTextFieldWidthValue","handleSelectwidthChange","setBorderwidthValue"],"mappings":"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","sourcesContent":["import React, {useCallback, useState} from 'react';\nimport {AppProvider,Button, Checkbox, Form, FormLayout,SettingToggle,TextStyle, TextField,Select,Card,Page,Popover,ColorPicker,Stack,hsbToRgb,rgbToHsb,rgbString} from '@shopify/polaris';\nimport { autobind } from \"@shopify/javascript-utilities/decorators\";\nimport \"@shopify/polaris/styles.css\";\n\n\n\nclass Postsettings extends React.Component {\n    constructor(props) {\n        super(props);\n\n\n    }\n\n    state = {\n        color: {\n            hue: 300,\n            brightness: 1,\n            saturation: 0.7,\n            alpha: 0.8\n        },\n        popoverActive: false\n    };\n\n    handleColorChange(color) {\n        this.setState({ color });\n    }\n\n\n    handleRgbChange(value) {\n        const rgbValues = value.replace(/[^\\d*.?\\d*,]/g, \"\").split(\",\");\n        const color = rgbToHsb({\n            red: rgbValues[0],\n            green: rgbValues[1],\n            blue: rgbValues[2],\n            alpha: rgbValues[3]\n        });\n        this.setState({ color });\n    }\n\n\n    handlePopoverClose() {\n        this.setState({ popoverActive: false });\n    }\n\n\n    handlePopoverOpen() {\n        this.setState({ popoverActive: true });\n    }\n\n\n    render() {\n\n\n        const { color, popoverActive } = this.state;\n\n        const rgbaColor = rgbString(hsbToRgb(color));\n\n        const activator = (\n            <Button onClick={this.handlePopoverOpen}>\n                <Stack alignment=\"center\" spacing=\"tight\">\n                    <div\n                        style={{\n                            height: \"2rem\",\n                            width: \"2rem\",\n                            borderRadius: \"0.3rem\",\n                            background: rgbaColor\n                        }}\n                    />\n                    <span>Primary color</span>\n                </Stack>\n            </Button>\n        );\n\n\n        // const handleSubmit = useCallback((_event) => {\n        //     setEmail('sdd');\n        //     setNewsletter(false);\n        // }, []);\n        //\n        // const handleNewsLetterChange = useCallback(\n        //     (value) => setNewsletter(value),\n        //     [],\n        // );\n        // const [selected, setSelected] = useState('grid');\n        // const [selected1, setSelected1] = useState('zoom_out');\n        // const handleSelectChange = useCallback((value) => setSelected(value), []);\n        // const handleSelectChange1 = useCallback((value) => setSelected1(value), []);\n        //\n        // const handleEmailChange = useCallback((value) => setEmail(value), []);\n\n        const options = [\n            {label: 'Grid', value: 'grid'},\n            {label: 'List', value: 'list'}\n        ];\n\n        const options1 = [\n            {label: 'Zoom Out', value: 'zoom_out'},\n            {label: 'Zoom In', value: 'zoom_in'}\n        ];\n\n        // const [active, setActive] = useState(false);\n        //\n        // const handleToggle = useCallback(() => setActive((active) => !active), []);\n        //\n        // const contentStatus = active ? 'Disable' : 'Enable';\n        //\n        //\n        // const [columnvalue, setcolumnvalue] = useState('1');\n        //\n        // const handleChangecolumn = useCallback((newValue) => setcolumnvalue(newValue), []);\n        //\n        // const [rowvalue, setrowvalue] = useState('1');\n        //\n        // const handleChangerow = useCallback((newValue) => setrowvalue(newValue), []);\n\n\n\n        // const [textwidthFieldValue, setTextFieldWidthValue] = useState('10.6');\n        // const [selectwidthValue, setBorderwidthValue] = useState('kg');\n\n        const handleTextFieldwidthChange = useCallback(\n            (value) => setTextFieldWidthValue(value),\n            [],\n        );\n\n        const handleSelectwidthChange = useCallback((value) => setBorderwidthValue(value), []);\n\n\n        return <div>\n            <Form\n                // onSubmit={handleSubmit}\n            >\n                <FormLayout>\n                    {/*<FormLayout.Group>*/}\n\n                        {/*<Select*/}\n                            {/*label=\"Widget Type\"*/}\n                            {/*options={options}*/}\n                            {/*// onChange={handleSelectChange}*/}\n                            {/*// value={selected}*/}\n                        {/*/>*/}\n\n                        {/*<Select*/}\n                            {/*label=\"Hover Effect\"*/}\n                            {/*options={options1}*/}\n                            {/*// onChange={handleSelectChange1}*/}\n                            {/*// value={selected1}*/}\n                        {/*/>*/}\n\n                        {/*<SettingToggle*/}\n                            {/*action={{*/}\n                                {/*// content: contentStatus,*/}\n                                {/*// onAction: handleToggle,*/}\n                            {/*}}*/}\n                            {/*// enabled={active}*/}\n                        {/*/>*/}\n\n\n                    {/*</FormLayout.Group>*/}\n                    {/*<FormLayout.Group>*/}\n                        {/*<TextField type=\"number\" label=\"Layout Columns\"*/}\n                                   {/*// value={columnvalue} onChange={handleChangecolumn}*/}\n                        {/*/>*/}\n                        {/*<TextField type=\"number\" label=\"Layout Rows\"*/}\n                                   {/*// value={rowvalue} onChange={handleChangerow}*/}\n                        {/*/>*/}\n                        {/*<SettingToggle*/}\n                            {/*action={{*/}\n                                {/*// content: contentStatus,*/}\n                                {/*// onAction: handleToggle,*/}\n                            {/*}}*/}\n                            {/*// enabled={active}*/}\n                        {/*/>*/}\n                    {/*</FormLayout.Group>*/}\n                    {/*<FormLayout.Group>*/}\n                        {/*<TextField*/}\n                            {/*label=\"Border Width\"*/}\n                            {/*type=\"number\"*/}\n                            {/*// value={textwidthFieldValue}*/}\n                            {/*// onChange={handleTextFieldwidthChange}*/}\n                            {/*connectedRight={*/}\n                                {/*<Select*/}\n                                    {/*// value={selectwidthValue}*/}\n                                    {/*label=\"Pixel Unit\"*/}\n                                    {/*// onChange={handleSelectwidthChange}*/}\n                                    {/*labelHidden*/}\n                                    {/*options={['PX']}*/}\n                                {/*/>*/}\n                            {/*}*/}\n                        {/*/>*/}\n\n                        {/*<TextField label=\"Widget Heading\"*/}\n\n                                   {/*// value={columnvalue} onChange={handleChangecolumn}*/}\n                        {/*/>*/}\n                        {/*<TextField label=\"Border Color\" type=\"color\"*/}\n                                   {/*// value={columnvalue} onChange={handleChangecolumn}*/}\n                        {/*/>*/}\n\n\n                    {/*</FormLayout.Group>*/}\n                    \n                    <FormLayout.Group>\n                        <Popover\n                            active={popoverActive}\n                            activator={activator}\n                            onClose={this.handlePopoverClose}\n                        >\n                            <Popover.Section>\n                                <ColorPicker\n                                    onChange={this.handleColorChange}\n                                    color={color}\n                                    allowAlpha\n                                />\n                            </Popover.Section>\n                            <Popover.Section>\n                                <TextField value={rgbaColor} onChange={this.handleRgbChange} />\n                            </Popover.Section>\n                        </Popover>\n                    </FormLayout.Group>\n\n                    <Button submit>Submit</Button>\n                </FormLayout>\n            </Form>\n        </div>;\n    }\n\n\n}\n\nexport default Postsettings;\n\n"]},"metadata":{},"sourceType":"module"}