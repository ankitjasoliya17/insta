{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nvar __jsx = React.createElement;\n\nfunction _createSuper(Derived) { return function () { var Super = _getPrototypeOf(Derived), result; if (_isNativeReflectConstruct()) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React from 'react';\nimport { AppProvider, Button, Checkbox, Form, FormLayout, SettingToggle, TextStyle, TextField, Select, Card, Page, Popover, ColorPicker, Stack, hsbToRgb, rgbToHsb, rgbString } from '@shopify/polaris';\nimport \"@shopify/polaris/styles.css\";\n\nvar Postsettings = /*#__PURE__*/function (_React$Component) {\n  _inherits(Postsettings, _React$Component);\n\n  var _super = _createSuper(Postsettings);\n\n  function Postsettings(props) {\n    var _this;\n\n    _classCallCheck(this, Postsettings);\n\n    _this = _super.call(this, props);\n    _this.state = {\n      color: {\n        hue: 300,\n        brightness: 1,\n        saturation: 0.7,\n        alpha: 0.8\n      },\n      popoverActive: false,\n      checkwidget: 'grid',\n      checkhover: 'zoom_out'\n    };\n    _this.handlePopoverOpen = _this.handlePopoverOpen.bind(_assertThisInitialized(_this));\n    _this.handleColorChange = _this.handleColorChange.bind(_assertThisInitialized(_this));\n    _this.handleRgbChange = _this.handleRgbChange.bind(_assertThisInitialized(_this));\n    _this.handlePopoverClose = _this.handlePopoverClose.bind(_assertThisInitialized(_this));\n    _this.handleSelectChange = _this.handleSelectChange.bind(_assertThisInitialized(_this));\n    return _this;\n  }\n\n  _createClass(Postsettings, [{\n    key: \"handleColorChange\",\n    value: function handleColorChange(color) {\n      this.setState({\n        color: color\n      });\n    }\n  }, {\n    key: \"handleRgbChange\",\n    value: function handleRgbChange(value) {\n      var rgbValues = value.replace(/[^\\d*.?\\d*,]/g, \"\").split(\",\");\n      var color = rgbToHsb({\n        red: rgbValues[0],\n        green: rgbValues[1],\n        blue: rgbValues[2],\n        alpha: rgbValues[3]\n      });\n      this.setState({\n        color: color\n      });\n    }\n  }, {\n    key: \"handlePopoverClose\",\n    value: function handlePopoverClose() {\n      this.setState({\n        popoverActive: false\n      });\n    }\n  }, {\n    key: \"handlePopoverOpen\",\n    value: function handlePopoverOpen() {\n      this.setState({\n        popoverActive: true\n      });\n    }\n  }, {\n    key: \"handleSelectChange\",\n    value: function handleSelectChange(value) {\n      this.setState({\n        checkwidget: value\n      });\n    }\n  }, {\n    key: \"handleSelectHoveeffect\",\n    value: function handleSelectHoveeffect(value) {\n      this.setState({\n        checkwidget: value\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$state = this.state,\n          color = _this$state.color,\n          popoverActive = _this$state.popoverActive;\n      var rgbaColor = rgbString(hsbToRgb(color));\n      console.log(rgbaColor);\n\n      var activator = __jsx(Button, {\n        onClick: this.handlePopoverOpen\n      }, __jsx(Stack, {\n        alignment: \"center\",\n        spacing: \"tight\"\n      }, __jsx(\"div\", {\n        style: {\n          height: \"2rem\",\n          width: \"2rem\",\n          borderRadius: \"0.3rem\",\n          background: rgbaColor\n        }\n      }), __jsx(\"span\", null, \"Primary color\"))); // const handleSubmit = useCallback((_event) => {\n      //     setEmail('sdd');\n      //     setNewsletter(false);\n      // }, []);\n      //\n      // const handleNewsLetterChange = useCallback(\n      //     (value) => setNewsletter(value),\n      //     [],\n      // );\n      // const [selected, setSelected] = useState('grid');\n      // const [selected1, setSelected1] = useState('zoom_out');\n      // const handleSelectChange = useCallback((value) => setSelected(value), []);\n      // const handleSelectChange1 = useCallback((value) => setSelected1(value), []);\n      //\n      // const handleEmailChange = useCallback((value) => setEmail(value), []);\n\n\n      var options = [{\n        label: 'Grid',\n        value: 'grid'\n      }, {\n        label: 'List',\n        value: 'list'\n      }];\n      var options1 = [{\n        label: 'Zoom Out',\n        value: 'zoom_out'\n      }, {\n        label: 'Zoom In',\n        value: 'zoom_in'\n      }]; // const [active, setActive] = useState(false);\n      //\n      // const handleToggle = useCallback(() => setActive((active) => !active), []);\n      //\n      // const contentStatus = active ? 'Disable' : 'Enable';\n      //\n      //\n      // const [columnvalue, setcolumnvalue] = useState('1');\n      //\n      // const handleChangecolumn = useCallback((newValue) => setcolumnvalue(newValue), []);\n      //\n      // const [rowvalue, setrowvalue] = useState('1');\n      //\n      // const handleChangerow = useCallback((newValue) => setrowvalue(newValue), []);\n      // const [textwidthFieldValue, setTextFieldWidthValue] = useState('10.6');\n      // const [selectwidthValue, setBorderwidthValue] = useState('kg');\n      // const handleTextFieldwidthChange = useCallback(\n      //     (value) => setTextFieldWidthValue(value),\n      //     [],\n      // );\n      //\n      // const handleSelectwidthChange = useCallback((value) => setBorderwidthValue(value), []);\n\n      return __jsx(\"div\", null, __jsx(Form // onSubmit={handleSubmit}\n      , null, __jsx(FormLayout, null, __jsx(FormLayout.Group, null, __jsx(Select, {\n        label: \"Widget Type\",\n        options: options,\n        onChange: this.handleSelectChange,\n        value: this.state.checkwidget\n      }), __jsx(Select, {\n        label: \"Hover Effect\",\n        options: options1,\n        onChange: this.handleSelectHoveeffect,\n        value: selected1\n      }), __jsx(SettingToggle, {\n        action: {// content: contentStatus,\n          // onAction: handleToggle,\n        } // enabled={active}\n\n      })), __jsx(FormLayout.Group, null, __jsx(Popover, {\n        active: popoverActive,\n        activator: activator,\n        onClose: this.handlePopoverClose\n      }, __jsx(Popover.Section, null, __jsx(ColorPicker, {\n        onChange: this.handleColorChange,\n        color: color,\n        allowAlpha: true\n      })), __jsx(Popover.Section, null, __jsx(TextField, {\n        value: rgbaColor,\n        onChange: this.handleRgbChange\n      })))), __jsx(Button, {\n        submit: true\n      }, \"Submit\"))));\n    }\n  }]);\n\n  return Postsettings;\n}(React.Component);\n\nexport default Postsettings;","map":{"version":3,"sources":["/Users/imac/Downloads/app/insta/pages/postsettings.js"],"names":["React","AppProvider","Button","Checkbox","Form","FormLayout","SettingToggle","TextStyle","TextField","Select","Card","Page","Popover","ColorPicker","Stack","hsbToRgb","rgbToHsb","rgbString","Postsettings","props","state","color","hue","brightness","saturation","alpha","popoverActive","checkwidget","checkhover","handlePopoverOpen","bind","handleColorChange","handleRgbChange","handlePopoverClose","handleSelectChange","setState","value","rgbValues","replace","split","red","green","blue","rgbaColor","console","log","activator","height","width","borderRadius","background","options","label","options1","handleSelectHoveeffect","selected1","Component"],"mappings":"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","sourcesContent":["import React from 'react';\nimport {AppProvider,Button, Checkbox, Form, FormLayout,SettingToggle,TextStyle, TextField,Select,Card,Page,Popover,ColorPicker,Stack,hsbToRgb,rgbToHsb,rgbString} from '@shopify/polaris';\n\nimport \"@shopify/polaris/styles.css\";\n\n\n\nclass Postsettings extends React.Component {\n    constructor(props) {\n        super(props);\n\n\n        this.state = {\n            color: {\n                hue: 300,\n                brightness: 1,\n                saturation: 0.7,\n                alpha: 0.8\n\n            },\n            popoverActive: false,\n            checkwidget : 'grid', \n            checkhover : 'zoom_out'\n        }\n\n        this.handlePopoverOpen = this.handlePopoverOpen.bind(this);\n        this.handleColorChange = this.handleColorChange.bind(this);\n        this.handleRgbChange = this.handleRgbChange.bind(this);\n        this.handlePopoverClose = this.handlePopoverClose.bind(this);\n        this.handleSelectChange = this.handleSelectChange.bind(this);\n\n\n    }\n\n    handleColorChange(color) {\n        this.setState({ color });\n    }\n\n\n    handleRgbChange(value) {\n        const rgbValues = value.replace(/[^\\d*.?\\d*,]/g, \"\").split(\",\");\n        const color = rgbToHsb({\n            red: rgbValues[0],\n            green: rgbValues[1],\n            blue: rgbValues[2],\n            alpha: rgbValues[3]\n        });\n        this.setState({ color });\n    }\n\n\n    handlePopoverClose() {\n        this.setState({ popoverActive: false });\n    }\n\n\n    handlePopoverOpen() {\n        this.setState({\n            popoverActive : true\n        })\n    }\n\n\n    handleSelectChange(value){\n        this.setState({\n            checkwidget :value\n        })\n    }\n\n    handleSelectHoveeffect(value){\n        this.setState({\n            checkwidget :value\n        })\n    }\n\n    render() {\n\n\n        const { color, popoverActive } = this.state;\n\n        const rgbaColor = rgbString(hsbToRgb(color));\n        console.log(rgbaColor);\n\n        const activator = (\n            <Button onClick={this.handlePopoverOpen}>\n                <Stack alignment=\"center\" spacing=\"tight\">\n                    <div\n                        style={{\n                            height: \"2rem\",\n                            width: \"2rem\",\n                            borderRadius: \"0.3rem\",\n                            background: rgbaColor\n                        }}\n                    />\n                    <span>Primary color</span>\n                </Stack>\n            </Button>\n        );\n\n\n        // const handleSubmit = useCallback((_event) => {\n        //     setEmail('sdd');\n        //     setNewsletter(false);\n        // }, []);\n        //\n        // const handleNewsLetterChange = useCallback(\n        //     (value) => setNewsletter(value),\n        //     [],\n        // );\n        // const [selected, setSelected] = useState('grid');\n        // const [selected1, setSelected1] = useState('zoom_out');\n        // const handleSelectChange = useCallback((value) => setSelected(value), []);\n        // const handleSelectChange1 = useCallback((value) => setSelected1(value), []);\n        //\n        // const handleEmailChange = useCallback((value) => setEmail(value), []);\n\n        const options = [\n            {label: 'Grid', value: 'grid'},\n            {label: 'List', value: 'list'}\n        ];\n\n        const options1 = [\n            {label: 'Zoom Out', value: 'zoom_out'},\n            {label: 'Zoom In', value: 'zoom_in'}\n        ];\n\n        // const [active, setActive] = useState(false);\n        //\n        // const handleToggle = useCallback(() => setActive((active) => !active), []);\n        //\n        // const contentStatus = active ? 'Disable' : 'Enable';\n        //\n        //\n        // const [columnvalue, setcolumnvalue] = useState('1');\n        //\n        // const handleChangecolumn = useCallback((newValue) => setcolumnvalue(newValue), []);\n        //\n        // const [rowvalue, setrowvalue] = useState('1');\n        //\n        // const handleChangerow = useCallback((newValue) => setrowvalue(newValue), []);\n\n\n\n        // const [textwidthFieldValue, setTextFieldWidthValue] = useState('10.6');\n        // const [selectwidthValue, setBorderwidthValue] = useState('kg');\n\n        // const handleTextFieldwidthChange = useCallback(\n        //     (value) => setTextFieldWidthValue(value),\n        //     [],\n        // );\n        //\n        // const handleSelectwidthChange = useCallback((value) => setBorderwidthValue(value), []);\n\n\n        return <div>\n            <Form\n                // onSubmit={handleSubmit}\n            >\n                <FormLayout>\n                    <FormLayout.Group>\n\n                        <Select\n                            label=\"Widget Type\"\n                            options={options}\n                            onChange={this.handleSelectChange}\n                            value={this.state.checkwidget}\n                        />\n\n                        <Select\n                            label=\"Hover Effect\"\n                            options={options1}\n                            onChange={this.handleSelectHoveeffect}\n                            value={selected1}\n                        />\n\n                        <SettingToggle\n                            action={{\n                                // content: contentStatus,\n                                // onAction: handleToggle,\n                            }}\n                            // enabled={active}\n                        />\n\n\n                    </FormLayout.Group>\n                    {/*<FormLayout.Group>*/}\n                        {/*<TextField type=\"number\" label=\"Layout Columns\"*/}\n                                   {/*// value={columnvalue} onChange={handleChangecolumn}*/}\n                        {/*/>*/}\n                        {/*<TextField type=\"number\" label=\"Layout Rows\"*/}\n                                   {/*// value={rowvalue} onChange={handleChangerow}*/}\n                        {/*/>*/}\n                        {/*<SettingToggle*/}\n                            {/*action={{*/}\n                                {/*// content: contentStatus,*/}\n                                {/*// onAction: handleToggle,*/}\n                            {/*}}*/}\n                            {/*// enabled={active}*/}\n                        {/*/>*/}\n                    {/*</FormLayout.Group>*/}\n                    {/*<FormLayout.Group>*/}\n                        {/*<TextField*/}\n                            {/*label=\"Border Width\"*/}\n                            {/*type=\"number\"*/}\n                            {/*// value={textwidthFieldValue}*/}\n                            {/*// onChange={handleTextFieldwidthChange}*/}\n                            {/*connectedRight={*/}\n                                {/*<Select*/}\n                                    {/*// value={selectwidthValue}*/}\n                                    {/*label=\"Pixel Unit\"*/}\n                                    {/*// onChange={handleSelectwidthChange}*/}\n                                    {/*labelHidden*/}\n                                    {/*options={['PX']}*/}\n                                {/*/>*/}\n                            {/*}*/}\n                        {/*/>*/}\n\n                        {/*<TextField label=\"Widget Heading\"*/}\n\n                                   {/*// value={columnvalue} onChange={handleChangecolumn}*/}\n                        {/*/>*/}\n                        {/*<TextField label=\"Border Color\" type=\"color\"*/}\n                                   {/*// value={columnvalue} onChange={handleChangecolumn}*/}\n                        {/*/>*/}\n\n\n                    {/*</FormLayout.Group>*/}\n                    <FormLayout.Group>\n                        <Popover\n                            active={popoverActive}\n                            activator={activator}\n                            onClose={this.handlePopoverClose}\n                        >\n                            <Popover.Section>\n                                <ColorPicker\n                                    onChange={this.handleColorChange}\n                                    color={color}\n                                    allowAlpha\n                                />\n                            </Popover.Section>\n                            <Popover.Section>\n                                <TextField value={rgbaColor} onChange={this.handleRgbChange} />\n                            </Popover.Section>\n                        </Popover>\n                    </FormLayout.Group>\n\n                    <Button submit>Submit</Button>\n                </FormLayout>\n            </Form>\n        </div>;\n    }\n\n\n}\n\nexport default Postsettings;\n"]},"metadata":{},"sourceType":"module"}