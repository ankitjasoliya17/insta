{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { useCallback, useState } from 'react';\nimport { AppProvider, Button, Checkbox, Form, FormLayout, SettingToggle, TextStyle, TextField, Select, Card, Page, Popover, ColorPicker, Stack, hsbToRgb, rgbToHsb, rgbString } from '@shopify/polaris';\nimport { autobind } from \"@shopify/javascript-utilities/decorators\";\nimport \"@shopify/polaris/styles.css\";\n\nclass Postsettings extends React.Component {\n  constructor(props) {\n    super(props);\n    state = {\n      color: {\n        hue: 300,\n        brightness: 1,\n        saturation: 0.7,\n        alpha: 0.8\n      },\n      popoverActive: false\n    };\n  }\n\n  handleColorChange(color) {\n    this.setState({\n      color\n    });\n  }\n\n  handleRgbChange(value) {\n    const rgbValues = value.replace(/[^\\d*.?\\d*,]/g, \"\").split(\",\");\n    const color = rgbToHsb({\n      red: rgbValues[0],\n      green: rgbValues[1],\n      blue: rgbValues[2],\n      alpha: rgbValues[3]\n    });\n    this.setState({\n      color\n    });\n  }\n\n  handlePopoverClose() {\n    this.setState({\n      popoverActive: false\n    });\n  }\n\n  handlePopoverOpen() {\n    this.setState({\n      popoverActive: true\n    });\n  }\n\n  render() {\n    return __jsx(\"div\", null, __jsx(FormOnSubmitExample, null));\n  }\n\n}\n\nexport default Postsettings;\n\nfunction FormOnSubmitExample() {\n  const {\n    0: newsletter,\n    1: setNewsletter\n  } = useState(false);\n  const {\n    0: email,\n    1: setEmail\n  } = useState('');\n  const handleSubmit = useCallback(_event => {\n    setEmail('sdd');\n    setNewsletter(false);\n  }, []);\n  const handleNewsLetterChange = useCallback(value => setNewsletter(value), []);\n  const {\n    0: selected,\n    1: setSelected\n  } = useState('grid');\n  const {\n    0: selected1,\n    1: setSelected1\n  } = useState('zoom_out');\n  const handleSelectChange = useCallback(value => setSelected(value), []);\n  const handleSelectChange1 = useCallback(value => setSelected1(value), []);\n  const handleEmailChange = useCallback(value => setEmail(value), []);\n  const options = [{\n    label: 'Grid',\n    value: 'grid'\n  }, {\n    label: 'List',\n    value: 'list'\n  }];\n  const options1 = [{\n    label: 'Zoom Out',\n    value: 'zoom_out'\n  }, {\n    label: 'Zoom In',\n    value: 'zoom_in'\n  }];\n  const {\n    0: active,\n    1: setActive\n  } = useState(false);\n  const handleToggle = useCallback(() => setActive(active => !active), []);\n  const contentStatus = active ? 'Disable' : 'Enable';\n  const {\n    0: columnvalue,\n    1: setcolumnvalue\n  } = useState('1');\n  const handleChangecolumn = useCallback(newValue => setcolumnvalue(newValue), []);\n  const {\n    0: rowvalue,\n    1: setrowvalue\n  } = useState('1');\n  const handleChangerow = useCallback(newValue => setrowvalue(newValue), []);\n  const {\n    0: textwidthFieldValue,\n    1: setTextFieldWidthValue\n  } = useState('10.6');\n  const {\n    0: selectwidthValue,\n    1: setBorderwidthValue\n  } = useState('kg');\n  const handleTextFieldwidthChange = useCallback(value => setTextFieldWidthValue(value), []);\n  const handleSelectwidthChange = useCallback(value => setBorderwidthValue(value), []);\n  return __jsx(Form, {\n    onSubmit: handleSubmit\n  }, __jsx(FormLayout, null, __jsx(FormLayout.Group, null, __jsx(Select, {\n    label: \"Widget Type\",\n    options: options,\n    onChange: handleSelectChange,\n    value: selected\n  }), __jsx(Select, {\n    label: \"Hover Effect\",\n    options: options1,\n    onChange: handleSelectChange1,\n    value: selected1\n  }), __jsx(SettingToggle, {\n    action: {\n      content: contentStatus,\n      onAction: handleToggle\n    },\n    enabled: active\n  })), __jsx(FormLayout.Group, null, __jsx(TextField, {\n    type: \"number\",\n    label: \"Layout Columns\",\n    value: columnvalue,\n    onChange: handleChangecolumn\n  }), __jsx(TextField, {\n    type: \"number\",\n    label: \"Layout Rows\",\n    value: rowvalue,\n    onChange: handleChangerow\n  }), __jsx(SettingToggle, {\n    action: {\n      content: contentStatus,\n      onAction: handleToggle\n    },\n    enabled: active\n  })), __jsx(FormLayout.Group, null, __jsx(TextField, {\n    label: \"Border Width\",\n    type: \"number\",\n    value: textwidthFieldValue,\n    onChange: handleTextFieldwidthChange,\n    connectedRight: __jsx(Select, {\n      value: selectwidthValue,\n      label: \"Pixel Unit\",\n      onChange: handleSelectwidthChange,\n      labelHidden: true,\n      options: ['PX']\n    })\n  }), __jsx(TextField, {\n    label: \"Widget Heading\",\n    value: columnvalue,\n    onChange: handleChangecolumn\n  }), __jsx(TextField, {\n    label: \"Border Color\",\n    type: \"color\",\n    value: columnvalue,\n    onChange: handleChangecolumn\n  })), __jsx(Button, {\n    submit: true\n  }, \"Submit\")));\n}","map":{"version":3,"sources":["/Users/imac/Downloads/app/insta/pages/postsettings.js"],"names":["React","useCallback","useState","AppProvider","Button","Checkbox","Form","FormLayout","SettingToggle","TextStyle","TextField","Select","Card","Page","Popover","ColorPicker","Stack","hsbToRgb","rgbToHsb","rgbString","autobind","Postsettings","Component","constructor","props","state","color","hue","brightness","saturation","alpha","popoverActive","handleColorChange","setState","handleRgbChange","value","rgbValues","replace","split","red","green","blue","handlePopoverClose","handlePopoverOpen","render","FormOnSubmitExample","newsletter","setNewsletter","email","setEmail","handleSubmit","_event","handleNewsLetterChange","selected","setSelected","selected1","setSelected1","handleSelectChange","handleSelectChange1","handleEmailChange","options","label","options1","active","setActive","handleToggle","contentStatus","columnvalue","setcolumnvalue","handleChangecolumn","newValue","rowvalue","setrowvalue","handleChangerow","textwidthFieldValue","setTextFieldWidthValue","selectwidthValue","setBorderwidthValue","handleTextFieldwidthChange","handleSelectwidthChange","content","onAction"],"mappings":"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","sourcesContent":["import React, {useCallback, useState} from 'react';\nimport {AppProvider,Button, Checkbox, Form, FormLayout,SettingToggle,TextStyle, TextField,Select,Card,Page,Popover,ColorPicker,Stack,hsbToRgb,rgbToHsb,rgbString} from '@shopify/polaris';\nimport { autobind } from \"@shopify/javascript-utilities/decorators\";\nimport \"@shopify/polaris/styles.css\";\n\n\n\nclass Postsettings extends React.Component {\n    constructor(props) {\n        super(props);\n\n        state = {\n            color: {\n                hue: 300,\n                brightness: 1,\n                saturation: 0.7,\n                alpha: 0.8\n            },\n            popoverActive: false\n        };\n    }\n\n\n    handleColorChange(color) {\n        this.setState({ color });\n    }\n\n\n    handleRgbChange(value) {\n        const rgbValues = value.replace(/[^\\d*.?\\d*,]/g, \"\").split(\",\");\n        const color = rgbToHsb({\n            red: rgbValues[0],\n            green: rgbValues[1],\n            blue: rgbValues[2],\n            alpha: rgbValues[3]\n        });\n        this.setState({ color });\n    }\n\n\n    handlePopoverClose() {\n        this.setState({ popoverActive: false });\n    }\n\n\n    handlePopoverOpen() {\n        this.setState({ popoverActive: true });\n    }\n\n\n    render() {\n\n        return <div>\n            <FormOnSubmitExample />\n        </div>;\n    }\n\n\n}\n\nexport default Postsettings;\n\n\nfunction FormOnSubmitExample() {\n    const [newsletter, setNewsletter] = useState(false);\n    const [email, setEmail] = useState('');\n\n    const handleSubmit = useCallback((_event) => {\n        setEmail('sdd');\n        setNewsletter(false);\n    }, []);\n\n    const handleNewsLetterChange = useCallback(\n        (value) => setNewsletter(value),\n        [],\n    );\n    const [selected, setSelected] = useState('grid');\n    const [selected1, setSelected1] = useState('zoom_out');\n    const handleSelectChange = useCallback((value) => setSelected(value), []);\n    const handleSelectChange1 = useCallback((value) => setSelected1(value), []);\n\n    const handleEmailChange = useCallback((value) => setEmail(value), []);\n\n    const options = [\n        {label: 'Grid', value: 'grid'},\n        {label: 'List', value: 'list'}\n    ];\n\n    const options1 = [\n        {label: 'Zoom Out', value: 'zoom_out'},\n        {label: 'Zoom In', value: 'zoom_in'}\n    ];\n\n    const [active, setActive] = useState(false);\n\n    const handleToggle = useCallback(() => setActive((active) => !active), []);\n\n    const contentStatus = active ? 'Disable' : 'Enable';\n\n\n    const [columnvalue, setcolumnvalue] = useState('1');\n\n    const handleChangecolumn = useCallback((newValue) => setcolumnvalue(newValue), []);\n\n    const [rowvalue, setrowvalue] = useState('1');\n\n    const handleChangerow = useCallback((newValue) => setrowvalue(newValue), []);\n\n\n\n    const [textwidthFieldValue, setTextFieldWidthValue] = useState('10.6');\n    const [selectwidthValue, setBorderwidthValue] = useState('kg');\n\n    const handleTextFieldwidthChange = useCallback(\n        (value) => setTextFieldWidthValue(value),\n        [],\n    );\n\n    const handleSelectwidthChange = useCallback((value) => setBorderwidthValue(value), []);\n\n\n\n\n\n\n    return (\n        <Form onSubmit={handleSubmit}>\n            <FormLayout>\n            <FormLayout.Group>\n\n                <Select\n                    label=\"Widget Type\"\n                    options={options}\n                    onChange={handleSelectChange}\n                    value={selected}\n                />\n\n                <Select\n                    label=\"Hover Effect\"\n                    options={options1}\n                    onChange={handleSelectChange1}\n                    value={selected1}\n                />\n\n                <SettingToggle\n                    action={{\n                        content: contentStatus,\n                        onAction: handleToggle,\n                    }}\n                    enabled={active}\n                />\n\n\n            </FormLayout.Group>\n              <FormLayout.Group>\n                  <TextField type=\"number\" label=\"Layout Columns\" value={columnvalue} onChange={handleChangecolumn} />\n                  <TextField type=\"number\" label=\"Layout Rows\" value={rowvalue} onChange={handleChangerow} />\n                  <SettingToggle\n                      action={{\n                          content: contentStatus,\n                          onAction: handleToggle,\n                      }}\n                      enabled={active}\n                  />\n              </FormLayout.Group>\n                <FormLayout.Group>\n                    <TextField\n                        label=\"Border Width\"\n                        type=\"number\"\n                        value={textwidthFieldValue}\n                        onChange={handleTextFieldwidthChange}\n                        connectedRight={\n                            <Select\n                                value={selectwidthValue}\n                                label=\"Pixel Unit\"\n                                onChange={handleSelectwidthChange}\n                                labelHidden\n                                options={['PX']}\n                            />\n                        }\n                    />\n\n                    <TextField label=\"Widget Heading\" value={columnvalue} onChange={handleChangecolumn} />\n                    <TextField label=\"Border Color\" type=\"color\" value={columnvalue} onChange={handleChangecolumn} />\n\n\n                </FormLayout.Group>\n\n                <Button submit>Submit</Button>\n            </FormLayout>\n        </Form>\n    );\n}"]},"metadata":{},"sourceType":"module"}