{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React from 'react';\nimport axios from 'axios';\nimport request from 'superagent';\nimport FacebookLogin from 'react-facebook-login';\nimport { Link } from '@shopify/polaris';\nimport FacebookPage from '../pages/facebookpages';\n\nclass Index extends React.Component {\n  constructor(props) {\n    super(props);\n\n    _defineProperty(this, \"responseFacebook\", response => {\n      var self = this;\n      axios.post('http://localhost:5000/abcd/', response).then(function (response1) {\n        self.abcd(response1, response);\n      }).catch(function (error) {\n        console.log(error);\n      });\n    });\n\n    _defineProperty(this, \"componentClicked\", () => console.log('clieked'));\n\n    this.state = {\n      isFBLoggedIn: false,\n      userID: '',\n      name: '',\n      email: '',\n      picture: '',\n      allpages: ''\n    }; // This binding is necessary to make `this` work in the callback\n\n    this.logoutFacebook = this.logoutFacebook.bind(this);\n    this.abcd = this.abcd.bind(this);\n  }\n\n  logoutFacebook() {\n    console.log('111');\n    this.setState({\n      isFBLoggedIn: false\n    });\n  }\n\n  abcd(response, response1) {\n    this.setState({\n      isFBLoggedIn: true,\n      userID: response1.userID,\n      name: response1.name,\n      email: response1.email,\n      picture: response1.picture.data.url,\n      allpages: response.data\n    });\n  }\n\n  // async componentDidMount() {\n  // const url = \"http://localhost:5000/abcd/\";\n  // const response = await fetch(url,);\n  // const data = await response.json();\n  // console.log(data)\n  // axios.post('http://localhost:5000/abcd/', {\n  //     code: this.getUrlParameter('code')\n  // })\n  //     .then(function (response) {\n  //         console.log(response);\n  //     })\n  //     .catch(function (error) {\n  //         console.log(error);\n  //     });\n  // console.log(this.getUrlParameter('code'));\n  // fetch(\"\",this.getUrlParameter('code'))\n  //     .then(res => res.json())\n  //     .then(\n  //         (result) => {\n  //             console.log(result);\n  //         },\n  //         // Note: it's important to handle errors here\n  //         // instead of a catch() block so that we don't swallow\n  //         // exceptions from actual bugs in components.\n  //         (error) => {\n  //             console.log(error)\n  //         }\n  //     )\n  // }\n  // getUrlParameter(sParam) {\n  //     var sPageURL = window.location.search.substring(1),\n  //         sURLVariables = sPageURL.split('&'),\n  //         sParameterName,\n  //         i;\n  //\n  //     for (i = 0; i < sURLVariables.length; i++) {\n  //         sParameterName = sURLVariables[i].split('=');\n  //\n  //         if (sParameterName[0] === sParam) {\n  //             return sParameterName[1] === undefined ? true : decodeURIComponent(sParameterName[1]);\n  //         }\n  //     }\n  // };\n  render() {\n    let fbContent;\n\n    if (this.state.isFBLoggedIn) {\n      fbContent = __jsx(\"div\", {\n        style: {\n          width: '400px',\n          margin: 'auto',\n          background: '#f4f4f4',\n          padding: '20px'\n        }\n      }, __jsx(Link, {\n        onClick: this.logoutFacebook\n      }, \"Logout\"), __jsx(\"img\", {\n        src: this.state.picture,\n        alt: this.state.picture\n      }), __jsx(\"h2\", null, this.state.name), \"Email : \", this.state.email, __jsx(FacebookPage, {\n        alldata: this.state.allpages\n      }));\n    } else {\n      fbContent = __jsx(FacebookLogin, {\n        appId: \"591251971460198\",\n        autoLoad: true,\n        fields: \"name,email,picture\",\n        onClick: this.componentClicked,\n        callback: this.responseFacebook\n      });\n    }\n\n    return __jsx(\"div\", {\n      className: \"ankit\"\n    }, fbContent);\n  }\n\n}\n\nexport default Index;","map":null,"metadata":{},"sourceType":"module"}